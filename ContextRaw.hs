module ContextRaw where
import ExpConst
import Exp
import ContextAux
import MapUsingRBTree
cxtraw=(([],(0,[])),([Aux1 [(Forall [("x",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("x",-1),Var ("S",-1)]),App (C Lte) (T [Var ("x",-1),Var ("k",-1)])])])),App (C Subset) (T [Var ("S",-1),C SetN]),App (C (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "above",Just "by",Nothing])) (T [Var ("S",-1),Var ("k",-1)])),(App (C (Brack Bar Bar)) (Var ("x",-1)),App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [App (C (Brack Bar Bar)) (Var ("x",-1)),C SetN])),(Bind SetComp [("x",-1)] (T [Var ("x",-1),App (C In) (T [Var ("x",-1),Var ("S",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("S",-1)]),App (C Eql) (T [Bind SetComp [("x",-1)] (T [Var ("x",-1),App (C In) (T [Var ("x",-1),Var ("S",-1)])]),Var ("S",-1)])),(App (C SetExplicit) (T [Var ("x",-1)]),C (B True),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "singleton"])) (T [App (C SetExplicit) (T [Var ("x",-1)])])),(Bind SetComp [("x",-1)] (T [Var ("x",-1),App (C In) (T [Var ("x",-1),Var ("S",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("S",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Bind SetComp [("x",-1)] (T [Var ("x",-1),App (C In) (T [Var ("x",-1),Var ("S",-1)])])])),(Bind SetComp [("k",-1)] (T [App (C Subscript) (T [Var ("v",-1),Var ("k",-1)]),App (C In) (T [Var ("k",-1),App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)])])]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetN]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetN]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "with",Just "unbounded",Just "length"])) (T [Var ("v",-1)]),App (C Lte) (T [Var ("i",-1),Var ("j",-1)])])])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing])) (T [Bind SetComp [("k",-1)] (T [App (C Subscript) (T [Var ("v",-1),Var ("k",-1)]),App (C In) (T [Var ("k",-1),App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)])])]),Var ("v",-1),Var ("i",-1),Var ("j",-1)])),(Bind SetComp [("i",-1)] (T [App (C Subscript) (T [Var ("v",-1),Var ("i",-1)]),App (C In) (T [Var ("i",-1),App (C SetEnum) (T [C (N (0 )),App (C Minus) (T [App (C (Brack Bar Bar)) (Var ("v",-1)),C (N (1 ))])])])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector"])) (T [Var ("v",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing])) (T [Bind SetComp [("i",-1)] (T [App (C Subscript) (T [Var ("v",-1),Var ("i",-1)]),App (C In) (T [Var ("i",-1),App (C SetEnum) (T [C (N (0 )),App (C Minus) (T [App (C (Brack Bar Bar)) (Var ("v",-1)),C (N (1 ))])])])]),Var ("v",-1)])),(App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetZ]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetZ]),App (C Eql) (T [Var ("i",-1),Var ("j",-1)])])]),App (C Eql) (T [App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),App (C SetExplicit) (T [Var ("i",-1)])])),(App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetZ]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetZ]),App (C Lt) (T [Var ("j",-1),Var ("i",-1)])])]),App (C Eql) (T [App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),C (Set [])])),(App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetZ]),App (C In) (T [Var ("j",-1),C SetZ])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)])])),(App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetZ]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetZ]),App (C Lte) (T [Var ("i",-1),Var ("j",-1)])])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing])) (T [App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),Var ("i",-1),Var ("j",-1)])),(App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetN]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetN]),App (C Lte) (T [Var ("i",-1),Var ("j",-1)])])]),App (C Subset) (T [App (C SetEnum) (T [Var ("i",-1),Var ("j",-1)]),C SetN])),(Bind SetComp [("x",-1)] (T [App (Var ("f",-1)) (Var ("x",-1)),App (C In) (T [Var ("x",-1),App (C Dom) (Var ("f",-1))])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function"])) (T [Var ("f",-1)]),App (C Eql) (T [Bind SetComp [("x",-1)] (T [App (Var ("f",-1)) (Var ("x",-1)),App (C In) (T [Var ("x",-1),App (C Dom) (Var ("f",-1))])]),App (C Ran) (Var ("f",-1))])),(Bind Plus [("X",-1)] (T [App (C In) (T [Var ("X",-1),Var ("S",-1)]),App (C (Aggregate Plus)) (Var ("X",-1))]),C (B True),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "sum",Just "of",Just "sums",Just "of",Nothing])) (T [Bind Plus [("X",-1)] (T [App (C In) (T [Var ("X",-1),Var ("S",-1)]),App (C (Aggregate Plus)) (Var ("X",-1))]),Var ("S",-1)])),(Bind Plus [("x",-1)] (T [App (C In) (T [Var ("x",-1),Var ("S",-1)]),Var ("x",-1)]),App (C And) (T [App (C Subset) (T [Var ("S",-1),C SetR]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing])) (T [Bind Plus [("x",-1)] (T [App (C In) (T [Var ("x",-1),Var ("S",-1)]),Var ("x",-1)]),Var ("S",-1)])),(Bind Plus [("x",-1)] (T [App (C In) (T [Var ("x",-1),Var ("S",-1)]),Var ("e",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"])) (T [Var ("S",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "zero"])) (T [Bind Plus [("x",-1)] (T [App (C In) (T [Var ("x",-1),Var ("S",-1)]),Var ("e",-1)])])),(App (C (Aggregate Plus)) (Var ("S",-1)),App (C And) (T [App (C Subset) (T [Var ("S",-1),C SetZ]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)])]),App (C In) (T [App (C (Aggregate Plus)) (Var ("S",-1)),C SetZ])),(App (C (Aggregate Plus)) (Var ("S",-1)),App (C And) (T [App (C Subset) (T [Var ("S",-1),C SetR]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing])) (T [App (C (Aggregate Plus)) (Var ("S",-1)),Var ("S",-1)]),App (C In) (T [App (C (Aggregate Plus)) (Var ("S",-1)),C SetR])])),(App (C (Aggregate Plus)) (Var ("S",-1)),App (C And) (T [App (C Subset) (T [Var ("S",-1),C SetQ]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)])]),App (C In) (T [App (C (Aggregate Plus)) (Var ("S",-1)),C SetQ])),(App (C (Aggregate Plus)) (Var ("S",-1)),App (C And) (T [App (C Subset) (T [Var ("S",-1),C SetN]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)])]),App (C In) (T [App (C (Aggregate Plus)) (Var ("S",-1)),C SetN])),(App (C Pow) (T [App (C Pow) (T [Var ("x",-1),App (C Div) (T [C (N (1 )),C (N (2 ))])]),C (N (2 ))]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C Gte) (T [Var ("x",-1),C (N (0 ))])]),App (C Eql) (T [App (C Pow) (T [App (C Pow) (T [Var ("x",-1),App (C Div) (T [C (N (1 )),C (N (2 ))])]),C (N (2 ))]),Var ("x",-1)])),(App (C Pow) (T [Var ("x",-1),App (C Div) (T [C (N (1 )),C (N (2 ))])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C Gte) (T [Var ("x",-1),C (N (0 ))])]),App (C In) (T [App (C Pow) (T [Var ("x",-1),App (C Div) (T [C (N (1 )),C (N (2 ))])]),C SetR])),(Bind Times [("x",-1)] (T [App (C In) (T [Var ("x",-1),Var ("X",-1)]),Var ("x",-1)]),App (C And) (T [App (C Subset) (T [Var ("X",-1),C SetR]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing])) (T [Bind Times [("x",-1)] (T [App (C In) (T [Var ("x",-1),Var ("X",-1)]),Var ("x",-1)]),Var ("X",-1)])),(App (C (Aggregate Times)) (Var ("S",-1)),App (C (NLPredLC [Nothing,Just "is",Just "empty"])) (T [Var ("S",-1)]),App (C Eql) (T [App (C (Aggregate Times)) (Var ("S",-1)),C (N (1 ))])),(App (C (Aggregate Times)) (Var ("S",-1)),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)]),App (C Subset) (T [Var ("S",-1),C SetR])]),App (C In) (T [App (C (Aggregate Times)) (Var ("S",-1)),C SetR])),(App (C (Aggregate Times)) (Var ("S",-1)),App (C And) (T [App (C Subset) (T [Var ("S",-1),C SetR]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing])) (T [App (C (Aggregate Times)) (Var ("S",-1)),Var ("S",-1)])),(App (C Min) (Var ("S",-1)),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"])) (T [Var ("S",-1)]),App (C Subset) (T [Var ("S",-1),C SetR])])]),App (C In) (T [App (C Min) (Var ("S",-1)),Var ("S",-1)])),(App (C Max) (Var ("S",-1)),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("S",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"])) (T [Var ("S",-1)]),App (C Subset) (T [Var ("S",-1),C SetR])])]),App (C In) (T [App (C Max) (Var ("S",-1)),Var ("S",-1)])),(App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (C And) (T [App (C In) (T [Var ("b",-1),C SetN]),App (C And) (T [App (C Gt) (T [Var ("b",-1),C (N (1 ))]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C Gt) (T [Var ("x",-1),C (N (1 ))])])])]),App (C Gt) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),C (N (0 ))])),(App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (C And) (T [App (C In) (T [Var ("b",-1),C SetN]),App (C And) (T [App (C Gt) (T [Var ("b",-1),C (N (1 ))]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C In) (T [Var ("x",-1),C SetR])])])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing])) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),Var ("b",-1),Var ("x",-1)])),(App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("b",-1),C (N (1 ))])]),App (C In) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),C SetR])),(App (App (C Subscript) (T [C Log,Var ("b",-1)])) (App (C Times) (T [Var ("x",-1),Var ("y",-1)])),App (C And) (T [App (C Gt) (T [Var ("b",-1),C (N (1 ))]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])])]),App (C Eql) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (App (C Times) (T [Var ("x",-1),Var ("y",-1)])),App (C Plus) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("y",-1))])])),(App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (C And) (T [App (C In) (T [Var ("b",-1),C SetN]),App (C And) (T [App (C Gte) (T [Var ("b",-1),C (N (2 ))]),App (C Gte) (T [Var ("x",-1),Var ("b",-1)])])]),App (C And) (T [App (C Lt) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),Var ("x",-1)]),App (C Gte) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),C (N (1 ))])])),(App (App (C Subscript) (T [C Log,Var ("b",-1)])) (App (C Pow) (T [Var ("b",-1),Var ("x",-1)])),App (C And) (T [App (C Gt) (T [Var ("b",-1),C (N (1 ))]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C Gte) (T [Var ("x",-1),C (N (0 ))])])]),App (C Eql) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (App (C Pow) (T [Var ("b",-1),Var ("x",-1)])),Var ("x",-1)])),(App (C Log) (App (C Times) (T [Var ("x",-1),Var ("y",-1)])),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])]),App (C Eql) (T [App (C Log) (App (C Times) (T [Var ("x",-1),Var ("y",-1)])),App (C Plus) (T [App (C Log) (Var ("x",-1)),App (C Log) (Var ("y",-1))])])),(App (C Log) (Var ("x",-1)),App (C Gte) (T [Var ("x",-1),C (N (10 ))]),App (C And) (T [App (C Gte) (T [App (C Log) (Var ("x",-1)),C (N (1 ))]),App (C Lt) (T [App (C Log) (Var ("x",-1)),Var ("x",-1)])])),(App (C Log) (Var ("x",-1)),App (C Gt) (T [Var ("x",-1),C (N (10 ))]),App (C Gt) (T [App (C Log) (Var ("x",-1)),C (N (1 ))])),(App (C Log) (Var ("x",-1)),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C Gt) (T [Var ("x",-1),C (N (1 ))])]),App (C Gt) (T [App (C Log) (Var ("x",-1)),C (N (0 ))])),(App (C Log) (Var ("x",-1)),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C In) (T [Var ("x",-1),C SetR])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing])) (T [App (C Log) (Var ("x",-1)),C (N (10 )),Var ("x",-1)])),(App (C Plus) (T [App (C Log) (Var ("x",-1)),App (C Log) (Var ("y",-1))]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])]),App (C Eql) (T [App (C Log) (App (C Times) (T [Var ("x",-1),Var ("y",-1)])),App (C Plus) (T [App (C Log) (Var ("x",-1)),App (C Log) (Var ("y",-1))])])),(App (C Log) (Var ("x",-1)),App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C In) (T [App (C Log) (Var ("x",-1)),C SetR])),(App (Var ("\\ln",-1)) (App (C Pow) (T [C EulerE,Var ("x",-1)])),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (Var ("\\ln",-1)) (App (C Pow) (T [C EulerE,Var ("x",-1)])),Var ("x",-1)])),(App (Var ("\\ln",-1)) (Var ("x",-1)),App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C In) (T [App (Var ("ln",-1)) (Var ("x",-1)),C SetR])),(App (C Floor) (Var ("x",-1)),App (C In) (T [Var ("x",-1),C SetZ]),App (C Eql) (T [App (C Floor) (Var ("x",-1)),Var ("x",-1)])),(App (C Floor) (Var ("x",-1)),App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [App (C Floor) (Var ("x",-1)),C SetZ]),App (C Lte) (T [App (C Floor) (Var ("x",-1)),Var ("x",-1)])])),(App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),C (B True),App (C Eql) (T [App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),App (C LCM) (T [Var ("y",-1),Var ("x",-1)])])),(App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "prime"])) (T [Var ("x",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "prime"])) (T [Var ("y",-1)]),App (C Neq) (T [Var ("x",-1),Var ("y",-1)])])]),App (C Eql) (T [App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C Lte) (T [App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),App (C Eql) (T [Var ("x",-1),Var ("y",-1)]),App (C Eql) (T [App (C LCM) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1)])),(App (C LCM) (T [Var ("x",-1),C (N (1 ))]),App (C In) (T [Var ("x",-1),C SetZ]),App (C Eql) (T [App (C LCM) (T [Var ("x",-1),C (N (1 ))]),Var ("x",-1)])),(App (C LCM) (T [C (N (1 )),Var ("x",-1)]),App (C In) (T [Var ("x",-1),C SetZ]),App (C Eql) (T [App (C LCM) (T [C (N (1 )),Var ("x",-1)]),Var ("x",-1)])),(App (C Ceil) (Var ("x",-1)),App (C In) (T [Var ("x",-1),C SetZ]),App (C Eql) (T [App (C Ceil) (Var ("x",-1)),Var ("x",-1)])),(App (C Ceil) (Var ("x",-1)),App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [App (C Ceil) (Var ("x",-1)),C SetZ]),App (C Gte) (T [App (C Ceil) (Var ("x",-1)),Var ("x",-1)])])),(App (C IntervalCC) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing])) (T [App (C IntervalCC) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1),Var ("y",-1)])),(App (C IntervalCO) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing])) (T [App (C IntervalCO) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1),Var ("y",-1)])),(App (C IntervalOC) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing])) (T [App (C IntervalOC) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1),Var ("y",-1)])),(App (C IntervalOO) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing])) (T [App (C IntervalOO) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1),Var ("y",-1)])),(App (C IntervalOO) (T [App (C Neg) (C Infinity),C Infinity]),C (B True),App (C Eql) (T [C SetR,App (C IntervalOO) (T [App (C Neg) (C Infinity),C Infinity])])),(App (C GCF) (T [Var ("x",-1),Var ("y",-1)]),C (B True),App (C Eql) (T [App (C GCF) (T [Var ("x",-1),Var ("y",-1)]),App (C GCF) (T [Var ("y",-1),Var ("x",-1)])])),(App (C GCF) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "prime"])) (T [Var ("x",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "prime"])) (T [Var ("y",-1)]),App (C Neq) (T [Var ("x",-1),Var ("y",-1)])])]),App (C Eql) (T [App (C GCF) (T [Var ("x",-1),Var ("y",-1)]),C (N (1 ))])),(App (C GCF) (T [Var ("x",-1),Var ("y",-1)]),App (C Eql) (T [Var ("x",-1),Var ("y",-1)]),App (C Eql) (T [App (C GCF) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1)])),(App (C GCF) (T [Var ("x",-1),C (N (1 ))]),App (C In) (T [Var ("x",-1),C SetZ]),App (C Eql) (T [App (C GCF) (T [Var ("x",-1),C (N (1 ))]),C (N (1 ))])),(App (C GCF) (T [C (N (1 )),Var ("x",-1)]),App (C In) (T [Var ("x",-1),C SetZ]),App (C Eql) (T [App (C GCF) (T [C (N (1 )),Var ("x",-1)]),C (N (1 ))])),(App (C Pow) (T [C EulerE,App (Var ("\\ln",-1)) (Var ("x",-1))]),App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Eql) (T [App (C Pow) (T [C EulerE,App (Var ("\\ln",-1)) (Var ("x",-1))]),Var ("x",-1)])),(App (C Union) (T [C (Set []),Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C Eql) (T [App (C Union) (T [C (Set []),Var ("X",-1)]),Var ("X",-1)])),(App (C Isect) (T [C (Set []),Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C Eql) (T [App (C Isect) (T [C (Set []),Var ("X",-1)]),C (Set [])])),(App (C (Aggregate Union)) (Var ("S",-1)),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "sets"])) (T [Var ("S",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "union",Just "of",Just "the",Just "elements",Just "of",Nothing])) (T [App (C (Aggregate Union)) (Var ("S",-1)),Var ("S",-1)])),(App (C Times) (T [Var ("z",-1),App (C Plus) (T [Var ("x",-1),Var ("y",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Times) (T [Var ("z",-1),App (C Plus) (T [Var ("x",-1),Var ("y",-1)])]),App (C Plus) (T [App (C Times) (T [Var ("z",-1),Var ("x",-1)]),App (C Times) (T [Var ("z",-1),Var ("y",-1)])])])),(App (C (IterVect Times)) (T [Var ("X",-1),C (N (0 )),Var ("X",-1),App (C Minus) (T [App (C (Brack Bar Bar)) (Var ("X",-1)),C (N (1 ))])]),App (C And) (T [App (C Subset) (T [Var ("X",-1),C SetR]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing])) (T [App (C (IterVect Times)) (T [Var ("X",-1),C (N (0 )),Var ("X",-1),App (C Minus) (T [App (C (Brack Bar Bar)) (Var ("X",-1)),C (N (1 ))])]),Var ("X",-1)])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "power",Just "of",Nothing])) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1)])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetN])]),App (C In) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),C SetZ])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetN]),App (C In) (T [Var ("y",-1),C SetN])]),App (C In) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),C SetN])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetN]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetN]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)])])])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetQ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C In) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),C SetQ])),(App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C In) (T [Var ("y",-1),C SetR])]),App (C Gt) (T [App (C Pow) (T [Var ("x",-1),Var ("y",-1)]),C (N (0 ))])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Neq) (T [Var ("x",-1),C (N (0 ))]),App (C Neq) (T [Var ("y",-1),C (N (0 ))])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "multiplicative",Just "inverse",Just "of",Nothing])) (T [App (C Div) (T [Var ("y",-1),Var ("x",-1)]),App (C Div) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetQ]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetQ]),App (C Neq) (T [Var ("y",-1),C (N (0 ))])])]),App (C In) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),C SetQ])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gte) (T [Var ("x",-1),C (N (0 ))]),App (C And) (T [App (C Gt) (T [Var ("y",-1),C (N (0 ))]),App (C Lte) (T [Var ("x",-1),Var ("y",-1)])])]),App (C Lte) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),C (N (1 ))])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gte) (T [Var ("x",-1),C (N (0 ))]),App (C And) (T [App (C Gt) (T [Var ("y",-1),C (N (0 ))]),App (C Gte) (T [Var ("x",-1),Var ("y",-1)])])]),App (C Gte) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),C (N (1 ))])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gte) (T [Var ("x",-1),C (N (0 ))]),App (C And) (T [App (C Gt) (T [Var ("y",-1),C (N (0 ))]),App (C Gt) (T [Var ("x",-1),Var ("y",-1)])])]),App (C Gt) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),C (N (1 ))])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gte) (T [Var ("x",-1),C (N (0 ))]),App (C And) (T [App (C Gt) (T [Var ("y",-1),C (N (0 ))]),App (C Lt) (T [Var ("x",-1),Var ("y",-1)])])]),App (C Lt) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),C (N (1 ))])),(App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])]),App (C Gt) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),C (N (0 ))])),(App (C Div) (T [Var ("x",-1),Var ("x",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C Neq) (T [Var ("x",-1),C (N (0 ))])]),App (C Eql) (T [App (C Div) (T [Var ("x",-1),Var ("x",-1)]),C (N (1 ))])),(App (C Div) (T [Var ("x",-1),C (N (2 ))]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)])]),App (C In) (T [App (C Div) (T [Var ("x",-1),C (N (2 ))]),C SetZ])),(App (C Minus) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [App (C Minus) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C In) (T [App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),C SetZ])),(App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetQ]),App (C In) (T [Var ("y",-1),C SetQ])]),App (C In) (T [App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),C SetQ])),(App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetN]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetN]),App (C Gte) (T [Var ("x",-1),Var ("y",-1)])])]),App (C In) (T [App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),C SetN])),(App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),App (C Gte) (T [Var ("x",-1),Var ("y",-1)]),App (C Gte) (T [App (C Minus) (T [Var ("x",-1),Var ("y",-1)]),C (N (0 ))])),(App (C Minus) (T [Var ("x",-1),Var ("x",-1)]),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (C Minus) (T [Var ("x",-1),Var ("x",-1)]),C (N (0 ))])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C In) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),C SetR])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetN]),App (C In) (T [Var ("y",-1),C SetN])]),App (C In) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),C SetN])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gte) (T [Var ("x",-1),C (N (0 ))]),App (C Gte) (T [Var ("y",-1),C (N (0 ))])]),App (C And) (T [App (C Gte) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1)]),App (C Gte) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C In) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),C SetZ])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C Eql) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C Plus) (T [Var ("y",-1),Var ("x",-1)])])),(App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetQ]),App (C In) (T [Var ("y",-1),C SetQ])]),App (C In) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),C SetQ])),(App (C Plus) (T [Var ("x",-1),App (C Neg) (Var ("x",-1))]),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (C Plus) (T [Var ("x",-1),App (C Neg) (Var ("x",-1))]),C (N (0 ))])),(App (C Plus) (T [Var ("x",-1),App (C Times) (T [App (C Neg) (C (N (1 ))),Var ("x",-1)])]),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (C Plus) (T [Var ("x",-1),App (C Times) (T [App (C Neg) (C (N (1 ))),Var ("x",-1)])]),C (N (0 ))])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C Eql) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C Times) (T [Var ("y",-1),Var ("x",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (1 ))]),App (C Gt) (T [Var ("y",-1),C (N (1 ))])]),App (C And) (T [App (C Gt) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("x",-1)]),App (C Gt) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])]),App (C Gt) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),C (N (0 ))])),(App (C Times) (T [Var ("x",-1),App (C Div) (T [Var ("y",-1),Var ("z",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("z",-1),C SetR]),App (C Neq) (T [Var ("z",-1),C (N (0 ))])])])]),App (C Eql) (T [App (C Times) (T [Var ("x",-1),App (C Div) (T [Var ("y",-1),Var ("z",-1)])]),App (C Div) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)])])),(App (C Times) (T [Var ("x",-1),App (C Times) (T [Var ("y",-1),Var ("z",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Times) (T [Var ("x",-1),App (C Times) (T [Var ("y",-1),Var ("z",-1)])]),App (C Times) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)])])),(App (C Cart) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [App (C Cart) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Cart) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("Y",-1)])]),App (C Eql) (T [App (C (Brack Bar Bar)) (App (C Cart) (T [Var ("X",-1),Var ("Y",-1)])),App (C Times) (T [App (C (Brack Bar Bar)) (Var ("X",-1)),App (C (Brack Bar Bar)) (Var ("Y",-1))])])),(App (C Cart) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [App (C Cart) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Arrow) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [App (C Arrow) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Mod) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C In) (T [App (C Mod) (T [Var ("x",-1),Var ("y",-1)]),C SetZ])),(App (C Union) (T [Var ("X",-1),C (Set [])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C Eql) (T [App (C Union) (T [Var ("X",-1),C (Set [])]),Var ("X",-1)])),(App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [App (C Union) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [App (C Union) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C Eql) (T [App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),App (C Union) (T [Var ("Y",-1),Var ("X",-1)])])),(App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("Y",-1)])]),App (C Lte) (T [App (C (Brack Bar Bar)) (App (C Union) (T [Var ("X",-1),Var ("Y",-1)])),App (C Plus) (T [App (C (Brack Bar Bar)) (Var ("X",-1)),App (C (Brack Bar Bar)) (Var ("Y",-1))])])),(App (C Union) (T [Var ("X",-1),App (C Union) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Z",-1)])])]),App (C Eql) (T [App (C Union) (T [Var ("X",-1),App (C Union) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C Union) (T [App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Z",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "negative"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "positive"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "odd"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("x",-1)]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing])) (T [Var ("x",-1),App (C Times) (T [Var ("x",-1),Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing])) (T [Var ("y",-1),App (C Times) (T [Var ("x",-1),Var ("y",-1)])])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C In) (T [Var ("y",-1),C SetZ])]),App (C In) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),C SetZ])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C In) (T [Var ("y",-1),C SetR])]),App (C In) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),C SetR])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetQ]),App (C In) (T [Var ("y",-1),C SetQ])]),App (C In) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),C SetQ])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetN]),App (C In) (T [Var ("y",-1),C SetN])]),App (C In) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),C SetN])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),Var ("Z",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),App (C Div) (T [Var ("y",-1),Var ("x",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C Neq) (T [Var ("x",-1),C (N (0 ))])])]),App (C Eql) (T [App (C Times) (T [Var ("x",-1),App (C Div) (T [Var ("y",-1),Var ("x",-1)])]),Var ("y",-1)])),(App (C Isect) (T [Var ("X",-1),C (Set [])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C Eql) (T [App (C Isect) (T [Var ("X",-1),C (Set [])]),C (Set [])])),(App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C And) (T [App (C Subseteq) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),Var ("X",-1)]),App (C Subseteq) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Y",-1)])])),(App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("Y",-1)])]),App (C And) (T [App (C Lte) (T [App (C (Brack Bar Bar)) (App (C Isect) (T [Var ("X",-1),Var ("Y",-1)])),App (C (Brack Bar Bar)) (Var ("X",-1))]),App (C Lte) (T [App (C (Brack Bar Bar)) (App (C Isect) (T [Var ("X",-1),Var ("Y",-1)])),App (C (Brack Bar Bar)) (Var ("Y",-1))])])),(App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C Eql) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C Isect) (T [Var ("Y",-1),Var ("X",-1)])])),(App (C Isect) (T [Var ("X",-1),App (C Union) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Z",-1)])])]),App (C Eql) (T [App (C Isect) (T [Var ("X",-1),App (C Union) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C Union) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C Isect) (T [Var ("X",-1),Var ("Z",-1)])])])),(App (C Isect) (T [Var ("X",-1),App (C Isect) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Z",-1)])])]),App (C Eql) (T [App (C Isect) (T [Var ("X",-1),App (C Isect) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C Isect) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Z",-1)])])),(App (C Minus) (T [Var ("X",-1),Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [App (C Minus) (T [Var ("X",-1),Var ("Y",-1)])])),(App (C Minus) (T [Var ("X",-1),Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"])) (T [Var ("X",-1)]),App (C Lte) (T [App (C (Brack Bar Bar)) (App (C Minus) (T [Var ("X",-1),Var ("Y",-1)])),App (C (Brack Bar Bar)) (Var ("X",-1))])),(App (C Minus) (T [Var ("X",-1),Var ("Y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)])]),App (C Subseteq) (T [App (C Minus) (T [Var ("X",-1),Var ("Y",-1)]),Var ("X",-1)])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "composite"])) (T [Var ("y",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetZ]),App (C Neq) (T [Var ("x",-1),C (N (0 ))])])]),App (C (NLPredLC [Nothing,Just "is",Just "composite"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C Times) (T [Var ("x",-1),Var ("y",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "composite"])) (T [Var ("x",-1)]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetZ]),App (C Neq) (T [Var ("y",-1),C (N (0 ))])])]),App (C (NLPredLC [Nothing,Just "is",Just "composite"])) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)])])),(App (C (IterVect Plus)) (T [Var ("v",-1),C (N (0 )),Var ("v",-1),App (C Minus) (T [Var ("n",-1),C (N (1 ))])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "size",Nothing])) (T [Var ("v",-1),Var ("n",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "components",Just "of",Nothing])) (T [App (C (IterVect Plus)) (T [Var ("v",-1),C (N (0 )),Var ("v",-1),App (C Minus) (T [Var ("n",-1),C (N (1 ))])]),Var ("v",-1)])),(App (C (IterVect Plus)) (T [Var ("v",-1),Var ("i",-1),Var ("v",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetN]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetN]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "unbounded",Just "size"])) (T [Var ("v",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "reals"])) (T [Var ("v",-1)])])])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "components",Just "in",Nothing,Just "in",Just "the",Just "index",Just "range",Just "from",Nothing,Just "to",Nothing])) (T [App (C (IterVect Plus)) (T [Var ("v",-1),Var ("i",-1),Var ("v",-1),Var ("j",-1)]),Var ("v",-1),Var ("i",-1),Var ("j",-1)])),(App (C (IterVect Plus)) (T [Var ("v",-1),Var ("i",-1),Var ("v",-1),Var ("j",-1)]),App (C And) (T [App (C In) (T [Var ("i",-1),C SetN]),App (C And) (T [App (C In) (T [Var ("j",-1),C SetN]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "unbounded",Just "size"])) (T [Var ("v",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "naturals"])) (T [Var ("v",-1)])])])]),App (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "natural",Just "number",Just "components",Just "in",Nothing,Just "in",Just "the",Just "index",Just "range",Just "from",Nothing,Just "to",Nothing])) (T [App (C (IterVect Plus)) (T [Var ("v",-1),Var ("i",-1),Var ("v",-1),Var ("j",-1)]),Var ("v",-1),Var ("i",-1),Var ("j",-1)])),(App (C Pow) (T [Var ("S",-1),C Infinity]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("S",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors",Just "of",Just "unbounded",Just "size"])) (T [App (C Pow) (T [Var ("S",-1),C Infinity])])),(App (Var ("P",-1)) (Var ("n",-1)),App (C And) (T [App (C In) (T [Var ("n",-1),C SetN]),App (C (NLPredLC [Nothing,Just "is",Just "true",Just "for",Just "all",Just "natural",Just "numbers"])) (T [Var ("P",-1)])]),App (Var ("P",-1)) (Var ("n",-1))),(Var ("P",-1),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "predicate",Just "that",Just "satisfies",Just "the",Just "base",Just "step",Just "for",Just "natural",Just "numbers"])) (T [Var ("P",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "predicate",Just "that",Just "satisfies",Just "the",Just "inductive",Just "step",Just "for",Just "natural",Just "numbers"])) (T [Var ("P",-1)])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "true",Just "for",Just "all",Just "natural",Just "numbers"])) (T [Var ("P",-1)]),Forall [("n",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("n",-1),C SetN]),App (Var ("P",-1)) (Var ("n",-1))])]))])),(App (C Div) (T [Var ("n",-1),C (N (2 ))]),App (C (NLPredLC [Nothing,Just "is",Just "even"])) (T [Var ("n",-1)]),App (C In) (T [App (C Div) (T [Var ("n",-1),C (N (2 ))]),C SetZ])),(Var ("G",-1),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "an",Just "undirected",Just "graph"])) (T [Var ("G",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "an",Just "acyclic",Just "graph"])) (T [Var ("G",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "connected",Just "graph"])) (T [Var ("G",-1)])])]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "tree",Just "graph"])) (T [Var ("G",-1)])),(Var ("G",-1),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "tree",Just "graph"])) (T [Var ("G",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "an",Just "acyclic",Just "graph"])) (T [Var ("G",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "connected",Just "graph"])) (T [Var ("G",-1)])])),(Var ("G",-1),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "tree",Just "graph"])) (T [Var ("G",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "bipartite",Just "graph"])) (T [Var ("G",-1)])),(App (C Plus) (T [App (C Div) (T [Var ("a",-1),Var ("c",-1)]),App (C Div) (T [Var ("b",-1),Var ("c",-1)])]),App (C And) (T [App (C Neq) (T [Var ("c",-1),C (N (0 ))]),App (C And) (T [App (C In) (T [Var ("a",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("b",-1),C SetR]),App (C In) (T [Var ("c",-1),C SetR])])])]),App (C Eql) (T [App (C Plus) (T [App (C Div) (T [Var ("a",-1),Var ("c",-1)]),App (C Div) (T [Var ("b",-1),Var ("c",-1)])]),App (C Div) (T [App (C Plus) (T [Var ("a",-1),Var ("b",-1)]),Var ("c",-1)])])),(App (C Times) (T [App (C Neg) (C (N (1 ))),Var ("x",-1)]),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (C Times) (T [App (C Neg) (C (N (1 ))),Var ("x",-1)]),App (C Neg) (Var ("x",-1))])),(App (C Plus) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("y",-1))]),App (C And) (T [App (C Gt) (T [Var ("b",-1),C (N (1 ))]),App (C And) (T [App (C Gt) (T [Var ("x",-1),C (N (0 ))]),App (C Gt) (T [Var ("y",-1),C (N (0 ))])])]),App (C Eql) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (App (C Times) (T [Var ("x",-1),Var ("y",-1)])),App (C Plus) (T [App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("x",-1)),App (App (C Subscript) (T [C Log,Var ("b",-1)])) (Var ("y",-1))])])),(App (C Plus) (T [App (C Times) (T [Var ("z",-1),Var ("x",-1)]),App (C Times) (T [Var ("z",-1),Var ("y",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Plus) (T [App (C Times) (T [Var ("z",-1),Var ("x",-1)]),App (C Times) (T [Var ("z",-1),Var ("y",-1)])]),App (C Times) (T [Var ("z",-1),App (C Plus) (T [Var ("x",-1),Var ("y",-1)])])])),(App (C Times) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C Div) (T [Var ("y",-1),Var ("x",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C And) (T [App (C Neq) (T [Var ("x",-1),C (N (0 ))]),App (C Neq) (T [Var ("y",-1),C (N (0 ))])])])]),App (C Eql) (T [App (C Times) (T [App (C Div) (T [Var ("x",-1),Var ("y",-1)]),App (C Div) (T [Var ("y",-1),Var ("x",-1)])]),C (N (1 ))])),(App (C Times) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Times) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)]),App (C Plus) (T [App (C Times) (T [Var ("x",-1),Var ("z",-1)]),App (C Times) (T [Var ("y",-1),Var ("z",-1)])])])),(App (C Plus) (T [App (C Times) (T [Var ("x",-1),Var ("z",-1)]),App (C Times) (T [Var ("y",-1),Var ("z",-1)])]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Plus) (T [App (C Times) (T [Var ("x",-1),Var ("z",-1)]),App (C Times) (T [Var ("y",-1),Var ("z",-1)])]),App (C Times) (T [App (C Plus) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)])])),(App (C Pow) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Pow) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)]),App (C Times) (T [App (C Pow) (T [Var ("x",-1),Var ("z",-1)]),App (C Pow) (T [Var ("y",-1),Var ("z",-1)])])])),(App (C Times) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)]),App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C In) (T [Var ("z",-1),C SetR])])]),App (C Eql) (T [App (C Times) (T [Var ("x",-1),App (C Times) (T [Var ("y",-1),Var ("z",-1)])]),App (C Times) (T [App (C Times) (T [Var ("x",-1),Var ("y",-1)]),Var ("z",-1)])])),(App (C Union) (T [App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Z",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Z",-1)])])]),App (C Eql) (T [App (C Union) (T [Var ("X",-1),App (C Union) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C Union) (T [App (C Union) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Z",-1)])])),(App (C Union) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C Isect) (T [Var ("X",-1),Var ("Z",-1)])]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Z",-1)])])]),App (C Eql) (T [App (C Isect) (T [Var ("X",-1),App (C Union) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C Union) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),App (C Isect) (T [Var ("X",-1),Var ("Z",-1)])])])),(App (C Isect) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Z",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("X",-1)]),App (C And) (T [App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Y",-1)]),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"])) (T [Var ("Z",-1)])])]),App (C Eql) (T [App (C Isect) (T [Var ("X",-1),App (C Isect) (T [Var ("Y",-1),Var ("Z",-1)])]),App (C Isect) (T [App (C Isect) (T [Var ("X",-1),Var ("Y",-1)]),Var ("Z",-1)])])),(App (C Div) (T [App (C Plus) (T [Var ("a",-1),Var ("b",-1)]),Var ("c",-1)]),App (C And) (T [App (C Neq) (T [Var ("c",-1),C (N (0 ))]),App (C And) (T [App (C In) (T [Var ("a",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("b",-1),C SetR]),App (C In) (T [Var ("c",-1),C SetR])])])]),App (C Eql) (T [App (C Plus) (T [App (C Div) (T [Var ("a",-1),Var ("c",-1)]),App (C Div) (T [Var ("b",-1),Var ("c",-1)])]),App (C Div) (T [App (C Plus) (T [Var ("a",-1),Var ("b",-1)]),Var ("c",-1)])])),(App (C Plus) (T [App (C Neg) (Var ("x",-1)),Var ("x",-1)]),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (C Plus) (T [App (C Neg) (Var ("x",-1)),Var ("x",-1)]),C (N (0 ))])),(App (C Plus) (T [App (C Times) (T [App (C Neg) (C (N (1 ))),Var ("x",-1)]),Var ("x",-1)]),App (C In) (T [Var ("x",-1),C SetR]),App (C Eql) (T [App (C Plus) (T [App (C Times) (T [App (C Neg) (C (N (1 ))),Var ("x",-1)]),Var ("x",-1)]),C (N (0 ))]))],Aux2 [(Imp,App (C (NotC In)) (T [Var ("y",-1),Var ("X",-1)]),Forall [("x",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("x",-1),Var ("X",-1)]),App (C Neq) (T [Var ("y",-1),Var ("x",-1)])])]))),(Imp,Forall [("x",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("x",-1),Var ("X",-1)]),App (C Neq) (T [Var ("y",-1),Var ("x",-1)])])])),App (C (NotC In)) (T [Var ("y",-1),Var ("X",-1)])),(Imp,App (C (NotC In)) (T [Var ("y",-1),Var ("X",-1)]),Forall [("x",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("x",-1),Var ("X",-1)]),App (C Neq) (T [Var ("x",-1),Var ("y",-1)])])]))),(Imp,Forall [("x",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("x",-1),Var ("X",-1)]),App (C Neq) (T [Var ("x",-1),Var ("y",-1)])])])),App (C (NotC In)) (T [Var ("y",-1),Var ("X",-1)])),(Imp,Forall [("n",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("n",-1),C SetN]),App (C Imp) (T [App (Var ("P",-1)) (Var ("n",-1)),App (Var ("P",-1)) (App (C Plus) (T [Var ("n",-1),C (N (1 ))]))])])])),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "predicate",Just "that",Just "satisfies",Just "the",Just "inductive",Just "step",Just "for",Just "natural",Just "numbers"])) (T [Var ("P",-1)])),(Imp,Forall [("n",-1)] (App (C Imp) (T [C (B True),App (C Imp) (T [App (C In) (T [Var ("n",-1),C SetN]),App (C Imp) (T [App (C In) (T [Var ("n",-1),Var ("U",-1)]),App (C In) (T [App (C Plus) (T [Var ("n",-1),C (N (1 ))]),Var ("U",-1)])])])])),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "inductive",Just "step",Just "for",Just "natural",Just "numbers"])) (T [Var ("U",-1)])),(Imp,App (C (NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "empty",Just "set"])) (T [Var ("X",-1)]),Exists [("x",-1)] (App (C And) (T [C (B True),App (C In) (T [Var ("x",-1),Var ("X",-1)])]))),(Imp,App (Var ("P",-1)) (C (N (0 ))),App (C (NLPredLC [Nothing,Just "is",Just "a",Just "predicate",Just "that",Just "satisfies",Just "the",Just "base",Just "step",Just "for",Just "natural",Just "numbers"])) (T [Var ("P",-1)]))]],(Bran Bl (Bran R (Bran Bl (Bran Bl (Bran Bl (Bran Bl NULL (C (Aggregate Circ),114) NULL) (C (Aggregate Union),131) (Bran Bl NULL (C (Aggregate Isect),64) NULL)) (C (NotC Lt),141) (Bran Bl (Bran R (Bran Bl (Bran R NULL (C (NotC Lte),144) NULL) (C (NotC Gt),142) NULL) (C (NotC Gte),143) (Bran Bl NULL (C (NotC In),134) NULL)) (C Pow,17) (Bran R (Bran Bl (Bran R NULL (C EulerE,161) NULL) (C Neg,128) NULL) (C Times,97) (Bran Bl NULL (C Plus,2) NULL)))) (C Minus,41) (Bran Bl (Bran Bl (Bran R (Bran Bl NULL (C GCF,43) (Bran R NULL (C LCM,140) NULL)) (C Max,129) (Bran Bl NULL (C Min,130) NULL)) (C Subscript,22) (Bran R (Bran Bl NULL (C Circ,49) NULL) (C Eql,40) (Bran Bl NULL (C Neq,14) NULL))) (C Lt,27) (Bran Bl (Bran Bl NULL (C Lte,32) NULL) (C Gt,3) (Bran Bl NULL (C Gte,4) NULL)))) (C In,10) (Bran Bl (Bran R (Bran Bl (Bran Bl (Bran Bl NULL (C Union,11) (Bran R NULL (C Isect,85) NULL)) (C Cart,45) (Bran Bl NULL (C Arrow,9) NULL)) (C Ran,6) (Bran Bl (Bran Bl NULL (C Dom,8) (Bran R NULL (C Subset,38) NULL)) (C Subseteq,7) (Bran Bl NULL (C (B True),1) NULL))) (C (N (0 )),26) (Bran Bl (Bran R (Bran Bl (Bran Bl NULL (C (N (1 )),42) NULL) (C (N (2 )),126) (Bran Bl NULL (C (N (3 )),155) NULL)) (C (N (4 )),156) (Bran Bl (Bran Bl NULL (C (N (5 )),157) NULL) (C (N (6 )),158) (Bran R (Bran Bl NULL (C (N (7 )),159) NULL) (C (N (8 )),160) (Bran Bl NULL (C (N (9 )),153) (Bran R NULL (C (N (10 )),154) NULL))))) (C SetZ,33) (Bran Bl (Bran Bl NULL (C SetN,20) NULL) (C SetQ,30) (Bran Bl NULL (C SetR,31) NULL)))) (C Ast,16) (Bran R (Bran Bl (Bran R (Bran Bl (Bran R (Bran Bl (Bran R NULL (C SetExplicit,145) NULL) (C (Set []),13) NULL) (C PowerSet,86) (Bran Bl NULL (C (NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"]),44) NULL)) (C (NLPredLC [Nothing,Just "are",Just "sets"]),23) (Bran Bl NULL (C (NLPredLC [Nothing,Just "has",Just "a",Just "lower",Just "bound",Nothing]),146) NULL)) (C (NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "lower",Just "bound",Nothing]),147) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "upper",Just "bound",Nothing]),148) NULL) (C (NLPredLC [Nothing,Just "has",Just "an",Just "upper",Just "bound",Nothing]),149) (Bran Bl NULL (C (NLPredLC [Nothing,Just "has",Just "finite",Just "size"]),80) (Bran R NULL (C (NLPredLC [Nothing,Just "has",Just "size",Nothing]),137) NULL)))) (C (NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing]),69) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "component",Just "of",Nothing]),24) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing]),52) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"]),82) NULL))) (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set",Just "of",Just "finite",Just "sets"]),88) (Bran Bl (Bran Bl (Bran Bl (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "subset",Just "of",Nothing]),150) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "vector"]),84) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "map"]),5) (Bran R (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "natural"]),123) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "empty",Just "set"]),93) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "strict",Just "total",Just "order",Just "over",Nothing]),73) NULL))) (C (NLPredLC [Nothing,Just "is",Just "a",Just "partial",Just "order",Just "over",Nothing]),75) (Bran R (Bran Bl (Bran R (Bran Bl (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "partition",Just "of",Nothing]),132) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "prime",Just "factor",Just "of",Nothing]),63) (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "real"]),124) NULL)) (C (NLPredLC [Nothing,Just "is",Just "a",Just "reflexive",Just "relation",Just "over",Nothing]),74) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "relation",Just "between",Nothing,Just "and",Nothing]),78) NULL)) (C (NLPredLC [Nothing,Just "is",Just "a",Just "set"]),19) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "disjoint",Just "sets"]),65) NULL)) (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "sets"]),87) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors"]),18) (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors",Just "of",Just "unbounded",Just "size"]),121) NULL)) (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "base",Just "step",Just "for",Just "natural",Just "numbers"]),111) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "inductive",Just "step",Just "for",Just "natural",Just "numbers"]),112) NULL))))))) (C (NLPredLC [Nothing,Just "is",Just "a",Just "singleton"]),56) (Bran R (Bran Bl (Bran R (Bran Bl (Bran Bl (Bran R (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "split",Just "of",Nothing]),103) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "strict",Just "total",Just "order",Just "over",Nothing]),77) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function"]),54) NULL)) (C (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing]),50) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing]),53) NULL)) (C (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "relation",Just "over",Nothing]),70) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing]),71) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "trichotomous",Just "relation",Just "over",Nothing]),76) (Bran R (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector"]),83) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Nothing,Just "binary",Just "digits"]),118) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "integers"]),107) NULL)))) (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "naturals"]),105) (Bran Bl (Bran R (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "rationals"]),108) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "reals"]),106) (Bran R (Bran Bl (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "sets"]),133) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "size",Nothing]),113) NULL) (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "subvectors",Just "of",Nothing]),122) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "unbounded",Just "size"]),120) NULL))) (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "vectors"]),115) (Bran Bl (Bran Bl (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "with",Just "unbounded",Just "length"]),116) NULL) (C (NLPredLC [Nothing,Just "is",Just "an",Just "antisymmetric",Just "relation",Just "over",Nothing]),72) (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "an",Just "element",Just "of",Nothing]),135) NULL)) (C (NLPredLC [Nothing,Just "is",Just "an",Just "empty",Just "set"]),95) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence"]),117) NULL))) (C (NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence",Just "of",Just "elements",Just "from",Nothing]),21) (Bran R (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "set"]),91) (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "an",Just "integer"]),125) NULL)) (C (NLPredLC [Nothing,Just "is",Just "empty"]),96) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "even"]),37) (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "finite"]),81) NULL))) (C (NLPredLC [Nothing,Just "is",Just "injective"]),47) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "negative"]),25) NULL) (C (NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"]),15) (Bran R (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"]),34) NULL) (C (NLPredLC [Nothing,Just "is",Just "not",Just "a",Just "factor",Just "of",Nothing]),51) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "not",Just "an",Just "element",Just "of",Nothing]),136) NULL)))))) (C (NLPredLC [Nothing,Just "is",Just "odd"]),36) (Bran Bl (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "of",Just "finite",Just "size"]),79) NULL) (C (NLPredLC [Nothing,Just "is",Just "of",Just "size",Nothing]),138) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "one",Just "less",Just "than",Nothing]),62) NULL)) (C (NLPredLC [Nothing,Just "is",Just "one",Just "more",Just "than",Nothing]),55) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "positive"]),28) (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "prime"]),66) NULL)) (C (NLPredLC [Nothing,Just "is",Just "rational"]),29) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]),57) NULL)))) (C (NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"]),94) (Bran Bl (Bran Bl (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "image",Just "of",Nothing,Just "under",Nothing]),48) NULL) (C (NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]),58) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]),59) NULL)) (C (NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing]),46) (Bran Bl (Bran R (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "multiplicative",Just "inverse",Just "of",Nothing]),151) NULL) (C (NLPredLC [Nothing,Just "is",Just "the",Just "number",Just "of",Just "elements",Just "in",Nothing]),89) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]),60) NULL)) (C (NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing]),67) (Bran R (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "corresponding",Just "to",Just "the",Just "relational",Just "operator",Nothing]),92) NULL) (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing]),110) (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing]),12) NULL)))) (C (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "prime",Just "factors",Just "of",Nothing]),68) (Bran Bl (Bran R (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing]),90) NULL) (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing]),39) (Bran Bl (Bran R NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing]),139) NULL) (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "sums",Just "of",Nothing]),104) NULL)) (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "elements",Just "of",Nothing]),102) (Bran Bl (Bran Bl NULL (C (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "natural",Just "number",Just "components",Just "in",Nothing,Just "in",Just "the",Just "index",Just "range",Just "from",Nothing,Just "to",Nothing]),119) NULL) (C (NLPredLC [Nothing,Just "is",Just "zero"]),127) (Bran Bl NULL (C (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "above",Just "by",Nothing]),98) NULL))) (C (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "below",Just "by",Nothing]),99) (Bran R (Bran Bl (Bran Bl NULL (C (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "strictly",Just "bounded",Just "above",Just "by",Nothing]),100) NULL) (C (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "strictly",Just "bounded",Just "below",Just "by",Nothing]),101) (Bran Bl NULL (C (NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"]),35) NULL)) (C (Brack Bar Bar),61) (Bran Bl (Bran Bl NULL (C Infinity,109) NULL) (App (C Neg) (C (N (1 ))),152) (Bran R (Bran Bl (Bran R NULL (App (C Cart) (T [C SetR,C SetR]),163) NULL) (App (C SetExplicit) (T [C (N (0 )),C (N (1 ))]),162) NULL) (Bind SetComp [("#",0),("#",1)] (T [T [Var ("#",0),Var ("#",1)],App (C And) (T [App (C In) (T [Var ("#",0),C SetR]),App (C And) (T [App (C In) (T [Var ("#",1),C SetR]),App (C Lt) (T [Var ("#",0),Var ("#",1)])])])]),164) (Bran Bl NULL (Bind SetComp [("x",-1),("y",-1)] (T [T [Var ("x",-1),Var ("y",-1)],App (C And) (T [App (C In) (T [Var ("x",-1),C SetR]),App (C And) (T [App (C In) (T [Var ("y",-1),C SetR]),App (C Lt) (T [Var ("x",-1),Var ("y",-1)])])])]),165) NULL))))))),166),([(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "multiplicative",Just "inverse",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "multiplicative",Just "inverse",Just "of",Nothing]],[[-1,-3],[-2,-3]]),[(Eql,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],SLC Eql GCF],[[-1,-2],[-1,-3],[-4,-3,-2]]),[(Gte,[-4,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],SLC Eql GCF],[[-1,-2],[-1,-3],[-4,-2,-3]]),[(Gte,[-4,-1])])),(False,(([Subseteq,Subseteq,SLC Eql Union],[[-1,-3],[-2,-3],[-4,-1,-2]]),[(Subseteq,[-4,-3])])),(False,(([Lte,SLC Eql Plus,SLC Eql Plus],[[-4,-5],[-4,-1,-2],[-5,-1,-3]]),[(Lte,[-2,-3])])),(False,(([Lt,SLC Eql Plus,SLC Eql Plus],[[-4,-5],[-4,-1,-2],[-5,-1,-3]]),[(Lt,[-2,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing],Subseteq],[[-1,-3,20],[-2,-4,20],[-3,-4]]),[(Lte,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing],Subset],[[-1,-3,20],[-2,-4,20],[-3,-4]]),[(Lt,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing]],[[-1,-3,-4],[-2,-3,-4]]),[(Eql,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],Subseteq],[[-1],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "subset",Just "of",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "subset",Just "of",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-1]),(Subseteq,[-1,-2])])),(False,(([Lte],[[-1,-2]]),[(NLPredLC [Nothing,Just "has",Just "an",Just "upper",Just "bound",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "has",Just "an",Just "upper",Just "bound",Nothing]],[[-1,-2]]),[(Lte,[-1,-2])])),(False,(([Lt],[[-1,-2]]),[(NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "upper",Just "bound",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "upper",Just "bound",Nothing]],[[-1,-2]]),[(Lt,[-1,-2])])),(False,(([Gt],[[-1,-2]]),[(NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "lower",Just "bound",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "lower",Just "bound",Nothing]],[[-1,-2]]),[(Gt,[-1,-2])])),(False,(([Gte],[[-1,-2]]),[(NLPredLC [Nothing,Just "has",Just "a",Just "lower",Just "bound",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "has",Just "a",Just "lower",Just "bound",Nothing]],[[-1,-2]]),[(Gte,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"]],[[-2,-1]]),[(NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"]],[[-1,-2]]),[(NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"],[-2,-1])])),(False,(([Neq,Subseteq],[[-1,-2],[-1,-2]]),[(Subset,[-1,-2])])),(False,(([In,SLC Eql SetExplicit],[[-1,-3],[-3,-2]]),[(Eql,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"],NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"],SLC Eql Times],[[-1],[-2],[-3,-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"],[-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql Cart],[[-1],[-2],[-3,-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors"],[-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],Subseteq],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-2])])),(False,(([Gt],[[-1,-2]]),[(NotC Lte,[-1,-2])])),(False,(([NotC Lte],[[-1,-2]]),[(Gt,[-1,-2])])),(False,(([Lt],[[-1,-2]]),[(NotC Gte,[-1,-2])])),(False,(([NotC Gte],[[-1,-2]]),[(Lt,[-1,-2])])),(False,(([Lte],[[-1,-2]]),[(NotC Gt,[-1,-2])])),(False,(([NotC Gt],[[-1,-2]]),[(Lte,[-1,-2])])),(False,(([Gte],[[-1,-2]]),[(NotC Lt,[-1,-2])])),(False,(([NotC Lt],[[-1,-2]]),[(Gte,[-1,-2])])),(False,(([In,In,SLC Eql LCM],[[-1,33],[-2,33],[-3,-1,-2]]),[(In,[-3,33])])),(False,(([In,In,SLC Eql LCM],[[-1,33],[-2,33],[-3,-1,-2]]),[(Gte,[-3,-2])])),(False,(([In,In,SLC Eql LCM],[[-1,33],[-2,33],[-3,-1,-2]]),[(Gte,[-3,-1])])),(False,(([In,In,SLC Eql GCF],[[-1,33],[-2,33],[-3,-1,-2]]),[(Lte,[-3,-2])])),(False,(([In,In,SLC Eql GCF],[[-1,33],[-2,33],[-3,-1,-2]]),[(Lte,[-3,-1])])),(False,(([In,In,SLC Eql GCF],[[-1,33],[-2,33],[-3,-1,-2]]),[(In,[-3,33])])),(False,(([Subseteq,SLC Eql PowerSet],[[-1,-2],[-3,-2]]),[(In,[-1,-3])])),(False,(([In,SLC Eql PowerSet],[[-1,-3],[-3,-2]]),[(Subseteq,[-1,-2])])),(False,(([Gt,Gt],[[-1,-2],[-2,-1]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([Lt,Lt],[[-1,-2],[-2,-1]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],Subset],[[-1,-2],[-2],[-2,-3]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing],[-1,-2,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "of",Just "size",Nothing],[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "of",Just "size",Nothing]],[[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "has",Just "size",Nothing],[-2,-1])])),(False,(([NLPredLC [Nothing,Just "has",Just "size",Nothing]],[[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],Subset],[[-1,-2],[-2,33]]),[(In,[-1,33])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],Subset],[[-1,-2],[-2,20]]),[(In,[-1,20])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],In,SLC Eql Pow],[[-2],[-1,-3],[-3,-2,109]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "unbounded",Just "size"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "not",Just "an",Just "element",Just "of",Nothing]],[[-1,-2]]),[(NotC In,[-1,-2])])),(False,(([NotC In],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "not",Just "an",Just "element",Just "of",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "element",Just "of",Nothing]],[[-1,-2]]),[(In,[-1,-2])])),(False,(([In],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "an",Just "element",Just "of",Nothing],[-1,-2])])),(False,(([In,NotC In],[[-1,-2],[-1,-2]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "component",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "vectors"]],[[-1,-2],[-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "component",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "sets"]],[[-1,-2],[-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "partition",Just "of",Nothing]],[[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "disjoint",Just "sets"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "partition",Just "of",Nothing],SLC Eql (Aggregate Union)],[[-2,-1],[-3,-2]]),[(Eql,[-3,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],SLC Eql Min],[[-1,-2,-3],[-4,-1]]),[(Eql,[-4,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],SLC Eql Max],[[-1,-2,-3],[-4,-1]]),[(Eql,[-4,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],SLC Eql PowerSet],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-2])])),(False,(([In,SLC Eql Minus],[[-1,33],[-2,-1,42]]),[(NLPredLC [Nothing,Just "is",Just "one",Just "less",Just "than",Nothing],[-2,-1])])),(False,(([In,SLC Eql Plus],[[-1,33],[-2,-1,42]]),[(NLPredLC [Nothing,Just "is",Just "one",Just "more",Just "than",Nothing],[-2,-1])])),(False,(([In,SLC Eql Minus],[[-1,33],[-2,-1,42]]),[(NLPredLC [Nothing,Just "is",Just "one",Just "more",Just "than",Nothing],[-1,-2])])),(False,(([In,SLC Eql Plus],[[-1,33],[-2,-1,42]]),[(NLPredLC [Nothing,Just "is",Just "one",Just "less",Just "than",Nothing],[-1,-2])])),(False,(([In,SLC Eql Neg],[[-1,31],[-2,-1]]),[(In,[-2,31])])),(False,(([Eql],[[-1,26]]),[(NLPredLC [Nothing,Just "is",Just "zero"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "zero"]],[[-1]]),[(Eql,[-1,26])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing]],[[126,-1]]),[(NLPredLC [Nothing,Just "is",Just "even"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "even"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],[126,-1])])),(False,(([In,SLC Eql (Brack Bar Bar)],[[-2,20],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],SLC Eql (Brack Bar Bar)],[[-1],[-2,-1]]),[(In,[-2,20])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "integer"]],[[-1]]),[(In,[-1,33])])),(False,(([In],[[-1,33]]),[(NLPredLC [Nothing,Just "is",Just "an",Just "integer"],[-1])])),(False,(([In,SLC Eql Times],[[-1,31],[-2,-1,42]]),[(Eql,[-2,-1])])),(False,(([In,SLC Eql Times],[[-1,31],[-2,42,-1]]),[(Eql,[-2,-1])])),(False,(([In,SLC Eql (Brack Bar Bar)],[[-1,31],[-2,-1]]),[(Gte,[-2,26])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "real"]],[[-1]]),[(In,[-1,31])])),(False,(([In],[[-1,31]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "real"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "natural"]],[[-1]]),[(In,[-1,20])])),(False,(([In],[[-1,20]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "natural"],[-1])])),(False,(([In],[[-1,13]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "vector"],NLPredLC [Nothing,Just "is",Just "a",Just "split",Just "of",Nothing]],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "vectors"],[-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "subvectors",Just "of",Nothing],[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors",Just "of",Just "unbounded",Just "size"],In],[[-2],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "unbounded",Just "size"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "natural",Just "number",Just "components",Just "in",Nothing,Just "in",Just "the",Just "index",Just "range",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "natural",Just "number",Just "components",Just "in",Nothing,Just "in",Just "the",Just "index",Just "range",Just "from",Nothing,Just "to",Nothing],Lte,Lte],[[-2,-1,-3,-4],[-5,-1,-6,-7],[-3,-6],[-7,-4]]),[(Lte,[-5,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing],Lte,Gte],[[-2,-1,-3,-4],[-5,-1,-6,-7],[-3,-6],[-4,-7]]),[(Subseteq,[-5,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Nothing,Just "binary",Just "digits"],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing]],[[-1,-2],[-3,-1]]),[(Lte,[-3,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing],In,SLC Eql Pow],[[-5,-1,-2,-3],[-1,-6],[-6,-4,16]]),[(Subset,[-5,-4])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "with",Just "unbounded",Just "length"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "with",Just "unbounded",Just "length"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "vectors"],SLC Eql (Aggregate Circ)],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "size",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "size",Nothing],SLC Eql Circ,SLC Eql Plus],[[-1,-3],[-2,-4],[-5,-1,-2],[-6,-3,-4]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "size",Nothing],[-5,-6])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "vector"],NLPredLC [Nothing,Just "is",Just "a",Just "vector"],SLC Eql Circ],[[-1],[-2],[-3,-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector"],[-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "base",Just "step",Just "for",Just "natural",Just "numbers"],NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "inductive",Just "step",Just "for",Just "natural",Just "numbers"]],[[-1],[-1]]),[(Eql,[-1,20])])),(False,(([In],[[26,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "base",Just "step",Just "for",Just "natural",Just "numbers"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3,-4]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-1])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,33],[-3,-1,109]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "integers"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,31],[-3,-1,109]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "reals"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,30],[-3,-1,109]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "rationals"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,20],[-3,-1,109]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "naturals"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,33],[-3,-1,16]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "rationals"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,33],[-3,-1,16]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "integers"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,31],[-3,-1,16]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "reals"],[-2])])),(False,(([In,Subset,SLC Eql Pow],[[-2,-3],[-1,20],[-3,-1,16]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "naturals"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "sums",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "split",Just "of",Nothing]],[[-1,-3],[-2,-4],[-4,-3]]),[(Eql,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "empty"],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "elements",Just "of",Nothing]],[[-2],[-1,-2]]),[(Eql,[-1,26])])),(False,(([NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "strictly",Just "bounded",Just "below",Just "by",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],SLC Eql Times],[[-3,-4],[-2,-3],[-1,-3],[-5,-2,-4]]),[(Gt,[-1,-5])])),(False,(([NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "strictly",Just "bounded",Just "above",Just "by",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],SLC Eql Times],[[-3,-4],[-2,-3],[-1,-3],[-5,-2,-4]]),[(Lt,[-1,-5])])),(False,(([NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "below",Just "by",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],SLC Eql Times],[[-3,-4],[-2,-3],[-1,-3],[-5,-2,-4]]),[(Gte,[-1,-5])])),(False,(([NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "above",Just "by",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],SLC Eql Times],[[-3,-4],[-2,-3],[-1,-3],[-5,-2,-4]]),[(Lte,[-1,-5])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],NLPredLC [Nothing,Just "is",Just "empty"]],[[-1],[-1]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-1]),(NLPredLC [Nothing,Just "is",Just "empty"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "of",Just "finite",Just "size"],[-1]),(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "of",Just "finite",Just "size"],NLPredLC [Nothing,Just "is",Just "a",Just "set"]],[[-1],[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "empty"]],[[-1]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "an",Just "empty",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "empty",Just "set"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"]],[[-1],[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "empty",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "empty",Just "set"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-1]),(NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "corresponding",Just "to",Just "the",Just "relational",Just "operator",Nothing],SLC Eql Cart],[[-1,32],[-2,31,31]]),[(Subset,[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "strict",Just "total",Just "order",Just "over",Nothing],[-1,31])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "corresponding",Just "to",Just "the",Just "relational",Just "operator",Nothing],SLC Eql Cart],[[-1,27],[-2,31,31]]),[(Subset,[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "strict",Just "total",Just "order",Just "over",Nothing],[-1,31])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "singleton"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-1]),(NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "set"],SLC Eql PowerSet],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "set"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],SLC Eql (Brack Bar Bar)],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],SLC Eql (Brack Bar Bar)],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "number",Just "of",Just "elements",Just "in",Nothing],[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set",Just "of",Just "finite",Just "sets"],SLC Eql (Aggregate Isect)],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql PowerSet],[[-1],[-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "sets"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql Pow],[[-1],[-2,-1,42]]),[(Eql,[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql Union],[[-1],[-2,-1,-1]]),[(Eql,[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql Isect],[[-1],[-2,-1,-1]]),[(Eql,[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql Minus],[[-1],[-2,-1,-1]]),[(Eql,[-2,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"],SLC Eql (Brack Bar Bar)],[[-1],[-1],[-2,-1]]),[(Gte,[-2,42])])),(False,(([NLPredLC [Nothing,Just "is",Just "finite"],NLPredLC [Nothing,Just "is",Just "a",Just "vector"]],[[-1],[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "vector"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "vector"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "finite"],[-1]),(NLPredLC [Nothing,Just "is",Just "a",Just "vector"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "finite"],NLPredLC [Nothing,Just "is",Just "a",Just "set"]],[[-1],[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "finite"],[-1]),(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "of",Just "finite",Just "size"]],[[-1]]),[(NLPredLC [Nothing,Just "has",Just "finite",Just "size"],[-1])])),(False,(([NLPredLC [Nothing,Just "has",Just "finite",Just "size"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "of",Just "finite",Just "size"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],Subseteq],[[-1,-2],[-3,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],[-1,-3])])),(False,(([Subseteq,SLC Eql Cart],[[-1,-4],[-4,-2,-3]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "relation",Just "between",Nothing,Just "and",Nothing],[-1,-2,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "trichotomous",Just "relation",Just "over",Nothing]],[[-1,-2],[-1,-2],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "strict",Just "total",Just "order",Just "over",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "strict",Just "total",Just "order",Just "over",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "trichotomous",Just "relation",Just "over",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "reflexive",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "an",Just "antisymmetric",Just "relation",Just "over",Nothing]],[[-1,-2],[-1,-2],[-1,-2],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "partial",Just "order",Just "over",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "partial",Just "order",Just "over",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "reflexive",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "an",Just "antisymmetric",Just "relation",Just "over",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "an",Just "antisymmetric",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "relation",Just "over",Nothing]],[[-1,-2],[-1,-2],[-1,-2],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "strict",Just "total",Just "order",Just "over",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "strict",Just "total",Just "order",Just "over",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "an",Just "antisymmetric",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],[-1,-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "relation",Just "over",Nothing],[-1,-2])])),(False,(([Subseteq,SLC Eql Cart],[[-1,-3],[-3,-2,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing],Subset],[[-1,-2],[-2,33]]),[(In,[-1,33])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing],Subset],[[-1,-2],[-2,30]]),[(In,[-1,30])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing],Subset],[[-1,-2],[-2,20]]),[(In,[-1,20])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing]],[[-1,-3],[-2,-3]]),[(Eql,[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing],Subset,In],[[-1,-3],[-3,33],[-2,-3]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "prime"],NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing]],[[-1],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "prime",Just "factor",Just "of",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "prime",Just "factor",Just "of",Nothing]],[[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "prime"],[-1]),(NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "disjoint",Just "sets"],SLC Eql (Aggregate Isect)],[[-1],[-2,-1]]),[(Eql,[-2,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "prime",Just "factor",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "one",Just "more",Just "than",Nothing]],[[-3,-2],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "not",Just "a",Just "factor",Just "of",Nothing],[-3,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "prime",Just "factor",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "one",Just "less",Just "than",Nothing]],[[-3,-2],[-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "not",Just "a",Just "factor",Just "of",Nothing],[-3,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "map"],SLC Eql Dom,SLC Eql Ran],[[-1],[-2,-1],[-3,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-2]),(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gt,Lt],[[-1,-2,-3],[-4,-2],[-4,-3]]),[(In,[-4,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gt,Lte],[[-1,-2,-3],[-4,-2],[-4,-3]]),[(In,[-4,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gte,Lt],[[-1,-2,-3],[-4,-2],[-4,-3]]),[(In,[-4,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gte,Lte],[[-1,-2,-3],[-4,-2],[-4,-3]]),[(In,[-4,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(Subset,[-1,31])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gte],[[-1,-2,-3],[-2,-3]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(Subset,[-1,31])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gte],[[-1,-2,-3],[-2,-3]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(Subset,[-1,31])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Lte],[[-1,-2,-3],[-3,-2]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(Subset,[-1,31])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],Gt],[[-1,-2,-3],[-2,-3]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],SLC Eql (Brack Bar Bar)],[[-2,42,-1],[-3,-2]]),[(Eql,[-3,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-2]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-2]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-2]]),[(Eql,[-1,13])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-2]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "singleton"],[-1]),(In,[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],Lte,Gte],[[-3,-1,-2],[-6,-4,-5],[-1,-4],[-2,-5]]),[(Subseteq,[-6,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "one",Just "more",Just "than",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],SLC Eql Union],[[-4,-2],[-3,-1,-2],[-6,-4,-5],[-7,-3,-6]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],[-7,-1,-5])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],[-1,-2,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing],[-1,-2,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing]],[[-1,-2,-3]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing],In,SLC Eql Apply],[[-1,-3,-4],[-2,-3],[-5,-1,-2]]),[(In,[-5,-4])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],In,SLC Eql Apply],[[-1,-3,-4],[-2,-3],[-5,-1,-2]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "image",Just "of",Nothing,Just "under",Nothing],[-5,-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],In,SLC Eql Apply],[[-1,-3,-4],[-2,-3],[-5,-1,-2]]),[(In,[-5,-4])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing],In,SLC Eql Pow],[[-1,-2,-2],[-3,20],[-4,-1,-3]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing],[-4,-2,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "not",Just "a",Just "factor",Just "of",Nothing]],[[-1,-2],[-1,-2]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],SLC Eql Circ],[[-1,-3,-4],[-2,-4,-5],[-6,-2,-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],[-6,-3,-5])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "image",Just "of",Nothing,Just "under",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "image",Just "of",Nothing,Just "under",Nothing],NLPredLC [Nothing,Just "is",Just "injective"],Neq],[[-3,-2,-1],[-5,-4,-1],[-1],[-2,-4]]),[(Neq,[-3,-5])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing],Lte],[[-4,-1,-2],[-5,-1,-3],[-2,-3]]),[(Lte,[-4,-5])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing],Lt],[[-4,-1,-2],[-5,-1,-3],[-2,-3]]),[(Lt,[-4,-5])])),(False,(([Gte,Lte,SLC Eql Minus,SLC Eql Minus],[[-1,-2],[-3,-4],[-5,-1,-3],[-6,-2,-4]]),[(Gte,[-5,-6])])),(False,(([Gte,Gte,SLC Eql Plus,SLC Eql Plus],[[-1,-2],[-3,-4],[-5,-1,-3],[-6,-2,-4]]),[(Gte,[-5,-6])])),(False,(([Gte,SLC Eql Minus,SLC Eql Minus],[[-1,-2],[-4,-1,-3],[-5,-2,-3]]),[(Gte,[-4,-5])])),(False,(([Subseteq,SLC Eql Union],[[-1,-3],[-4,-2,-3]]),[(Subseteq,[-1,-4])])),(False,(([Subseteq,SLC Eql Union],[[-1,-2],[-4,-2,-3]]),[(Subseteq,[-1,-4])])),(False,(([Subseteq,Subseteq],[[-1,-2],[-2,-3]]),[(Subseteq,[-1,-3])])),(False,(([Subset,SLC Eql Union],[[-1,-3],[-4,-2,-3]]),[(Subset,[-1,-4])])),(False,(([Subset,SLC Eql Union],[[-1,-2],[-4,-2,-3]]),[(Subset,[-1,-4])])),(False,(([Subset,Subset],[[-1,-2],[-2,-3]]),[(Subset,[-1,-3])])),(False,(([Lte,Lte],[[-1,-2],[-2,-3]]),[(Lte,[-1,-3])])),(False,(([Gte,Gte],[[-1,-2],[-2,-3]]),[(Gte,[-1,-3])])),(False,(([Gt,Gt],[[-1,-2],[-2,-3]]),[(Gt,[-1,-3])])),(False,(([Lt,Lt],[[-1,-2],[-2,-3]]),[(Lt,[-1,-3])])),(False,(([In,In,SLC Eql Tuple,SLC Eql Cart],[[-1,-3],[-2,-4],[-5,-1,-2],[-6,-3,-4]]),[(In,[-5,-6])])),(False,(([Eql,SLC Eql GCF],[[-3,42],[-3,-1,-2]]),[(NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"],[-1,-2])])),(False,(([NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"],SLC Eql GCF],[[-1,-2],[-3,-1,-2]]),[(Eql,[-3,42])])),(False,(([Subset],[[-1,-2]]),[(Subseteq,[-1,-2])])),(False,(([Gt,SLC Eql Minus],[[-1,-2],[-3,-1,-2]]),[(Gt,[-3,26])])),(False,(([Lt,SLC Eql Minus],[[-1,-2],[-3,-1,-2]]),[(Lt,[-3,26])])),(False,(([Neq,Lte],[[-1,-2],[-1,-2]]),[(Lt,[-1,-2])])),(False,(([Neq,Gte],[[-1,-2],[-1,-2]]),[(Gt,[-1,-2])])),(False,(([Gte],[[-2,-1]]),[(Lte,[-1,-2])])),(False,(([Lte],[[-1,-2]]),[(Gte,[-2,-1])])),(False,(([Lte,Gte],[[-1,-2],[-1,-2]]),[(Eql,[-1,-2])])),(False,(([Gt],[[-1,-2]]),[(Neq,[-1,-2])])),(False,(([Gt],[[-1,-2]]),[(Gte,[-1,-2])])),(False,(([Lt],[[-1,-2]]),[(Neq,[-1,-2])])),(False,(([Lt],[[-1,-2]]),[(Lte,[-1,-2])])),(False,(([Gt],[[-2,-1]]),[(Lt,[-1,-2])])),(False,(([Lt],[[-1,-2]]),[(Gt,[-2,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],Subseteq,Subset],[[-1,-2],[-3,-4],[-2,-4],[-4,20]]),[(Lte,[-1,-3])])),(False,(([In,Subseteq],[[-1,-2],[-2,-3]]),[(In,[-1,-3])])),(False,(([NLPredLC [Nothing,Just "is",Just "even"],NLPredLC [Nothing,Just "is",Just "odd"]],[[-1],[-1]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"]],[[-1]]),[(Subseteq,[13,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"]],[[-1]]),[(Subseteq,[-1,-1])])),(False,(([Neq],[[-1,-1]]),[(NLPredLC [Just "there",Just "is",Just "a",Just "contradiction"],[])])),(False,(([NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"]],[[-1]]),[(Neq,[-1,26])])),(False,(([Neq],[[-1,26]]),[(NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"],[-1])])),(False,(([In,Gte],[[-1,33],[-1,26]]),[(In,[-1,20])])),(False,(([In],[[-1,31]]),[(Lte,[-1,-1])])),(False,(([In],[[-1,31]]),[(Gte,[-1,-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "rational"]],[[-1]]),[(In,[-1,30])])),(False,(([In],[[-1,30]]),[(NLPredLC [Nothing,Just "is",Just "rational"],[-1])])),(False,(([In],[[-1,20]]),[(Gte,[-1,26])])),(False,(([NLPredLC [Nothing,Just "is",Just "positive"]],[[-1]]),[(Gt,[-1,26])])),(False,(([Gt],[[-1,26]]),[(NLPredLC [Nothing,Just "is",Just "positive"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "negative"]],[[-1]]),[(Lt,[-1,26])])),(False,(([Lt],[[-1,26]]),[(NLPredLC [Nothing,Just "is",Just "negative"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "component",Just "of",Nothing],NLPredLC [Nothing,Just "are",Just "sets"]],[[-2,-1],[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence",Just "of",Just "elements",Just "from",Nothing],In,SLC Eql Subscript],[[-1,-2],[-3,20],[-4,-1,-3]]),[(In,[-4,-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence",Just "of",Just "elements",Just "from",Nothing],In,SLC Eql Pow],[[-1,-2],[-3,20],[-4,-2,16]]),[(In,[-1,-4])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors"]],[[-1]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set"],[-1])])),(False,(([NLPredLC [Nothing,Just "is",Just "a",Just "set"],SLC Eql Pow],[[-1],[-2,-1,16]]),[(NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors"],[-2])])),(False,(([NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"]],[[-1]]),[(Neq,[-1,13])])),(False,(([Gte,NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],SLC Eql Union],[[-2,-4],[-3,-1,-2],[-6,-4,-5],[-7,-3,-6]]),[(NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],[-7,-1,-5])])),(False,(([In,SLC Eql Dom,SLC Eql Ran,SLC Eql Arrow],[[-1,-4],[-5,-1],[-6,-1],[-4,-2,-3]]),[(Subseteq,[-5,-2]),(Subseteq,[-6,-3]),(NLPredLC [Nothing,Just "is",Just "a",Just "map"],[-1])])),(False,(([Gte,Gt,SLC Eql Plus,SLC Eql Plus],[[-1,-2],[-3,-4],[-5,-1,-3],[-6,-2,-4]]),[(Gt,[-5,-6])])),(False,(([Gt,Gte,SLC Eql Plus,SLC Eql Plus],[[-1,-2],[-3,-4],[-5,-1,-3],[-6,-2,-4]]),[(Gt,[-5,-6])]))],Bran Bl (Bran Bl (Bran Bl (Bran R (Bran Bl (Bran R (Bran Bl (Bran R NULL (SLC Eql Apply,(False,[])) NULL) (SLC Eql Tuple,(False,[])) NULL) (SLC Eql (Aggregate Circ),(False,[])) (Bran Bl (Bran R NULL (SLC Eql (Aggregate Union),(False,[])) NULL) (SLC Eql (Aggregate Isect),(False,[])) NULL)) (SLC Eql Pow,(False,[])) (Bran R (Bran Bl NULL (SLC Eql Neg,(False,[])) NULL) (SLC Eql Times,(False,[])) (Bran Bl NULL (SLC Eql Plus,(False,[])) NULL))) (SLC Eql Minus,(False,[])) (Bran Bl (Bran R (Bran Bl NULL (SLC Eql GCF,(False,[])) (Bran R NULL (SLC Eql LCM,(False,[])) NULL)) (SLC Eql Max,(False,[])) (Bran Bl NULL (SLC Eql Min,(False,[])) NULL)) (SLC Eql Subscript,(False,[])) (Bran R (Bran Bl (Bran R NULL (SLC Eql Circ,(False,[])) NULL) (SLC Eql Union,(False,[])) NULL) (SLC Eql Isect,(False,[])) (Bran Bl NULL (SLC Eql Cart,(False,[])) NULL)))) (SLC Eql Arrow,(False,[])) (Bran R (Bran Bl (Bran Bl NULL (SLC Eql Ran,(False,[])) NULL) (SLC Eql Dom,(False,[])) (Bran Bl (Bran R NULL (SLC Eql SetExplicit,(False,[])) NULL) (SLC Eql PowerSet,(False,[])) NULL)) (SLC Eql (Brack Bar Bar),(False,[])) (Bran Bl (Bran R (Bran Bl NULL (NotC Lt,(False,[(False,[42,42]),(False,[154,154]),(False,[126,126]),(False,[155,155]),(False,[156,156]),(False,[157,157]),(False,[158,158]),(False,[159,159]),(False,[160,160]),(False,[153,153]),(False,[152,152]),(False,[161,161]),(False,[154,158]),(False,[154,156]),(False,[154,126]),(False,[154,42]),(False,[154,155]),(False,[154,157]),(False,[154,159]),(False,[153,158]),(False,[153,156]),(False,[153,126]),(False,[153,26]),(False,[153,42]),(False,[153,155]),(False,[153,157]),(False,[153,159]),(False,[154,160]),(False,[153,160]),(False,[160,157]),(False,[160,155]),(False,[160,42]),(False,[160,26]),(False,[160,126]),(False,[160,156]),(False,[160,158]),(False,[160,159]),(False,[159,156]),(False,[159,126]),(False,[159,26]),(False,[159,42]),(False,[159,155]),(False,[159,157]),(False,[159,158]),(False,[158,155]),(False,[158,42]),(False,[158,26]),(False,[158,126]),(False,[158,156]),(False,[158,157]),(False,[157,126]),(False,[157,26]),(False,[157,42]),(False,[157,155]),(False,[157,156]),(False,[156,42]),(False,[156,26]),(False,[156,126]),(False,[156,155]),(False,[155,26]),(False,[155,42]),(False,[155,126]),(False,[126,26]),(False,[126,42]),(False,[154,26]),(False,[154,153]),(False,[42,26]),(False,[26,26])])) (Bran R NULL (NotC Lte,(False,[(False,[154,158]),(False,[154,156]),(False,[154,126]),(False,[154,26]),(False,[154,42]),(False,[154,155]),(False,[154,157]),(False,[154,159]),(False,[153,158]),(False,[153,156]),(False,[153,126]),(False,[153,26]),(False,[153,42]),(False,[153,155]),(False,[153,157]),(False,[153,159]),(False,[154,160]),(False,[153,160]),(False,[160,157]),(False,[160,155]),(False,[160,42]),(False,[160,26]),(False,[160,126]),(False,[160,156]),(False,[160,158]),(False,[160,159]),(False,[159,156]),(False,[159,126]),(False,[159,26]),(False,[159,42]),(False,[159,155]),(False,[159,157]),(False,[159,158]),(False,[158,155]),(False,[158,42]),(False,[158,26]),(False,[158,126]),(False,[158,156]),(False,[158,157]),(False,[157,126]),(False,[157,26]),(False,[157,42]),(False,[157,155]),(False,[157,156]),(False,[156,42]),(False,[156,26]),(False,[156,126]),(False,[156,155]),(False,[155,26]),(False,[155,42]),(False,[155,126]),(False,[126,26]),(False,[126,42]),(False,[154,153]),(False,[42,26])])) NULL)) (NotC Gt,(False,[(False,[42,42]),(False,[154,154]),(False,[126,126]),(False,[155,155]),(False,[156,156]),(False,[157,157]),(False,[158,158]),(False,[159,159]),(False,[160,160]),(False,[153,153]),(False,[152,152]),(False,[161,161]),(False,[159,154]),(False,[157,154]),(False,[155,154]),(False,[42,154]),(False,[126,154]),(False,[156,154]),(False,[158,154]),(False,[160,154]),(False,[158,153]),(False,[156,153]),(False,[126,153]),(False,[26,153]),(False,[42,153]),(False,[155,153]),(False,[157,153]),(False,[159,153]),(False,[160,153]),(False,[157,160]),(False,[155,160]),(False,[42,160]),(False,[26,160]),(False,[126,160]),(False,[156,160]),(False,[158,160]),(False,[159,160]),(False,[156,159]),(False,[126,159]),(False,[26,159]),(False,[42,159]),(False,[155,159]),(False,[157,159]),(False,[158,159]),(False,[155,158]),(False,[42,158]),(False,[26,158]),(False,[126,158]),(False,[156,158]),(False,[157,158]),(False,[126,157]),(False,[26,157]),(False,[42,157]),(False,[155,157]),(False,[156,157]),(False,[42,156]),(False,[26,156]),(False,[126,156]),(False,[155,156]),(False,[26,155]),(False,[42,155]),(False,[126,155]),(False,[26,126]),(False,[42,126]),(False,[26,154]),(False,[153,154]),(False,[26,42]),(False,[26,26])])) (Bran Bl NULL (NotC Gte,(False,[(False,[159,154]),(False,[157,154]),(False,[155,154]),(False,[42,154]),(False,[26,154]),(False,[126,154]),(False,[156,154]),(False,[158,154]),(False,[160,154]),(False,[158,153]),(False,[156,153]),(False,[126,153]),(False,[26,153]),(False,[42,153]),(False,[155,153]),(False,[157,153]),(False,[159,153]),(False,[160,153]),(False,[157,160]),(False,[155,160]),(False,[42,160]),(False,[26,160]),(False,[126,160]),(False,[156,160]),(False,[158,160]),(False,[159,160]),(False,[156,159]),(False,[126,159]),(False,[26,159]),(False,[42,159]),(False,[155,159]),(False,[157,159]),(False,[158,159]),(False,[155,158]),(False,[42,158]),(False,[26,158]),(False,[126,158]),(False,[156,158]),(False,[157,158]),(False,[126,157]),(False,[26,157]),(False,[42,157]),(False,[155,157]),(False,[156,157]),(False,[42,156]),(False,[26,156]),(False,[126,156]),(False,[155,156]),(False,[26,155]),(False,[42,155]),(False,[126,155]),(False,[26,126]),(False,[42,126]),(False,[153,154]),(False,[26,42])])) NULL)) (NotC In,(False,[])) (Bran Bl NULL (Eql,(False,[(False,[42,42]),(False,[154,154]),(False,[126,126]),(False,[155,155]),(False,[156,156]),(False,[157,157]),(False,[158,158]),(False,[159,159]),(False,[160,160]),(False,[153,153]),(False,[152,152]),(False,[161,161]),(False,[13,13]),(False,[26,26])])) NULL)))) (Neq,(False,[(False,[159,154]),(False,[157,154]),(False,[155,154]),(False,[42,154]),(False,[26,154]),(False,[126,154]),(False,[156,154]),(False,[158,154]),(False,[160,154]),(False,[158,153]),(False,[156,153]),(False,[126,153]),(False,[26,153]),(False,[42,153]),(False,[155,153]),(False,[157,153]),(False,[159,153]),(False,[154,158]),(False,[154,156]),(False,[154,126]),(False,[154,26]),(False,[154,42]),(False,[154,155]),(False,[154,157]),(False,[154,159]),(False,[160,153]),(False,[153,158]),(False,[153,156]),(False,[153,126]),(False,[153,26]),(False,[153,42]),(False,[153,155]),(False,[153,157]),(False,[153,159]),(False,[154,160]),(False,[153,160]),(False,[157,160]),(False,[155,160]),(False,[42,160]),(False,[26,160]),(False,[126,160]),(False,[156,160]),(False,[158,160]),(False,[159,160]),(False,[160,157]),(False,[160,155]),(False,[160,42]),(False,[160,26]),(False,[160,126]),(False,[160,156]),(False,[160,158]),(False,[160,159]),(False,[156,159]),(False,[126,159]),(False,[26,159]),(False,[42,159]),(False,[155,159]),(False,[157,159]),(False,[158,159]),(False,[159,156]),(False,[159,126]),(False,[159,26]),(False,[159,42]),(False,[159,155]),(False,[159,157]),(False,[159,158]),(False,[155,158]),(False,[42,158]),(False,[26,158]),(False,[126,158]),(False,[156,158]),(False,[157,158]),(False,[158,155]),(False,[158,42]),(False,[158,26]),(False,[158,126]),(False,[158,156]),(False,[158,157]),(False,[126,157]),(False,[26,157]),(False,[42,157]),(False,[155,157]),(False,[156,157]),(False,[157,126]),(False,[157,26]),(False,[157,42]),(False,[157,155]),(False,[157,156]),(False,[42,156]),(False,[26,156]),(False,[126,156]),(False,[155,156]),(False,[156,42]),(False,[156,26]),(False,[156,126]),(False,[156,155]),(False,[26,155]),(False,[42,155]),(False,[126,155]),(False,[155,26]),(False,[155,42]),(False,[155,126]),(False,[26,126]),(False,[42,126]),(False,[126,26]),(False,[126,42]),(False,[153,154]),(False,[154,153]),(False,[26,42]),(False,[42,26])])) (Bran Bl (Bran Bl (Bran Bl NULL (Lt,(False,[(False,[158,154]),(False,[156,154]),(False,[126,154]),(False,[26,154]),(False,[42,154]),(False,[155,154]),(False,[157,154]),(False,[159,154]),(False,[159,153]),(False,[157,153]),(False,[155,153]),(False,[42,153]),(False,[26,153]),(False,[126,153]),(False,[156,153]),(False,[158,153]),(False,[160,154]),(False,[160,153]),(False,[158,160]),(False,[156,160]),(False,[126,160]),(False,[26,160]),(False,[42,160]),(False,[155,160]),(False,[157,160]),(False,[159,160]),(False,[157,159]),(False,[155,159]),(False,[42,159]),(False,[26,159]),(False,[126,159]),(False,[156,159]),(False,[158,159]),(False,[156,158]),(False,[126,158]),(False,[26,158]),(False,[42,158]),(False,[155,158]),(False,[157,158]),(False,[155,157]),(False,[42,157]),(False,[26,157]),(False,[126,157]),(False,[156,157]),(False,[126,156]),(False,[26,156]),(False,[42,156]),(False,[155,156]),(False,[42,155]),(False,[26,155]),(False,[126,155]),(False,[26,126]),(False,[42,126]),(False,[153,154]),(False,[26,42])])) (Bran R NULL (Lte,(False,[(False,[152,152]),(False,[153,153]),(False,[160,160]),(False,[159,159]),(False,[158,158]),(False,[157,157]),(False,[156,156]),(False,[155,155]),(False,[126,126]),(False,[154,154]),(False,[42,42]),(False,[161,161]),(False,[158,154]),(False,[156,154]),(False,[126,154]),(False,[42,154]),(False,[155,154]),(False,[157,154]),(False,[159,154]),(False,[159,153]),(False,[157,153]),(False,[155,153]),(False,[42,153]),(False,[26,153]),(False,[126,153]),(False,[156,153]),(False,[158,153]),(False,[160,154]),(False,[160,153]),(False,[158,160]),(False,[156,160]),(False,[126,160]),(False,[26,160]),(False,[42,160]),(False,[155,160]),(False,[157,160]),(False,[159,160]),(False,[157,159]),(False,[155,159]),(False,[42,159]),(False,[26,159]),(False,[126,159]),(False,[156,159]),(False,[158,159]),(False,[156,158]),(False,[126,158]),(False,[26,158]),(False,[42,158]),(False,[155,158]),(False,[157,158]),(False,[155,157]),(False,[42,157]),(False,[26,157]),(False,[126,157]),(False,[156,157]),(False,[126,156]),(False,[26,156]),(False,[42,156]),(False,[155,156]),(False,[42,155]),(False,[26,155]),(False,[126,155]),(False,[26,126]),(False,[42,126]),(False,[26,154]),(False,[153,154]),(False,[26,42]),(False,[26,26])])) NULL)) (Gt,(False,[(False,[154,159]),(False,[154,157]),(False,[154,155]),(False,[154,42]),(False,[154,26]),(False,[154,126]),(False,[154,156]),(False,[154,158]),(False,[154,160]),(False,[153,159]),(False,[153,157]),(False,[153,155]),(False,[153,42]),(False,[153,26]),(False,[153,126]),(False,[153,156]),(False,[153,158]),(False,[153,160]),(False,[160,158]),(False,[160,156]),(False,[160,126]),(False,[160,26]),(False,[160,42]),(False,[160,155]),(False,[160,157]),(False,[160,159]),(False,[159,157]),(False,[159,155]),(False,[159,42]),(False,[159,26]),(False,[159,126]),(False,[159,156]),(False,[159,158]),(False,[158,156]),(False,[158,126]),(False,[158,26]),(False,[158,42]),(False,[158,155]),(False,[158,157]),(False,[157,155]),(False,[157,42]),(False,[157,26]),(False,[157,126]),(False,[157,156]),(False,[156,126]),(False,[156,26]),(False,[156,42]),(False,[156,155]),(False,[155,42]),(False,[155,26]),(False,[155,126]),(False,[126,26]),(False,[126,42]),(False,[154,153]),(False,[42,26])])) (Bran Bl NULL (Gte,(False,[(False,[152,152]),(False,[153,153]),(False,[160,160]),(False,[159,159]),(False,[158,158]),(False,[157,157]),(False,[156,156]),(False,[155,155]),(False,[126,126]),(False,[154,154]),(False,[42,42]),(False,[161,161]),(False,[154,159]),(False,[154,157]),(False,[154,155]),(False,[154,42]),(False,[154,126]),(False,[154,156]),(False,[154,158]),(False,[154,160]),(False,[153,159]),(False,[153,157]),(False,[153,155]),(False,[153,42]),(False,[153,26]),(False,[153,126]),(False,[153,156]),(False,[153,158]),(False,[153,160]),(False,[160,158]),(False,[160,156]),(False,[160,126]),(False,[160,26]),(False,[160,42]),(False,[160,155]),(False,[160,157]),(False,[160,159]),(False,[159,157]),(False,[159,155]),(False,[159,42]),(False,[159,26]),(False,[159,126]),(False,[159,156]),(False,[159,158]),(False,[158,156]),(False,[158,126]),(False,[158,26]),(False,[158,42]),(False,[158,155]),(False,[158,157]),(False,[157,155]),(False,[157,42]),(False,[157,26]),(False,[157,126]),(False,[157,156]),(False,[156,126]),(False,[156,26]),(False,[156,42]),(False,[156,155]),(False,[155,42]),(False,[155,26]),(False,[155,126]),(False,[126,26]),(False,[126,42]),(False,[154,26]),(False,[154,153]),(False,[42,26]),(False,[26,26])])) NULL)) (In,(False,[(False,[26,31]),(False,[42,31]),(False,[154,31]),(False,[126,31]),(False,[155,31]),(False,[156,31]),(False,[157,31]),(False,[158,31]),(False,[159,31]),(False,[160,31]),(False,[153,31]),(False,[152,31]),(False,[152,30]),(False,[153,30]),(False,[160,30]),(False,[159,30]),(False,[158,30]),(False,[157,30]),(False,[156,30]),(False,[155,30]),(False,[126,30]),(False,[154,30]),(False,[42,30]),(False,[26,30]),(False,[26,33]),(False,[42,33]),(False,[154,33]),(False,[126,33]),(False,[155,33]),(False,[156,33]),(False,[157,33]),(False,[158,33]),(False,[159,33]),(False,[160,33]),(False,[153,33]),(False,[161,31]),(False,[153,20]),(False,[160,20]),(False,[159,20]),(False,[158,20]),(False,[157,20]),(False,[156,20]),(False,[155,20]),(False,[126,20]),(False,[154,20]),(False,[42,20]),(False,[26,20]),(False,[152,33])])) (Bran R (Bran Bl (Bran Bl NULL (Subset,(False,[(False,[162,33]),(False,[162,30]),(False,[162,31]),(False,[162,20]),(False,[20,31]),(False,[20,30]),(False,[33,31]),(False,[33,30]),(False,[30,31]),(False,[20,33])])) NULL) (Subseteq,(False,[(False,[162,162]),(False,[13,162]),(False,[162,33]),(False,[162,30]),(False,[162,31]),(False,[162,20]),(False,[33,33]),(False,[20,31]),(False,[20,30]),(False,[33,31]),(False,[33,30]),(False,[31,31]),(False,[13,31]),(False,[30,30]),(False,[13,30]),(False,[30,31]),(False,[13,33]),(False,[20,20]),(False,[13,20]),(False,[20,33]),(False,[13,13])])) (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "and",Nothing,Just "are",Just "relatively",Just "prime"],(False,[])) NULL) (NLPredLC [Nothing,Just "are",Just "sets"],(False,[])) NULL)) (NLPredLC [Nothing,Just "has",Just "a",Just "lower",Just "bound",Nothing],(False,[(False,[42,42]),(False,[154,154]),(False,[126,126]),(False,[155,155]),(False,[156,156]),(False,[157,157]),(False,[158,158]),(False,[159,159]),(False,[160,160]),(False,[153,153]),(False,[152,152]),(False,[161,161]),(False,[154,158]),(False,[154,156]),(False,[154,126]),(False,[154,42]),(False,[154,155]),(False,[154,157]),(False,[154,159]),(False,[153,158]),(False,[153,156]),(False,[153,126]),(False,[153,26]),(False,[153,42]),(False,[153,155]),(False,[153,157]),(False,[153,159]),(False,[154,160]),(False,[153,160]),(False,[160,157]),(False,[160,155]),(False,[160,42]),(False,[160,26]),(False,[160,126]),(False,[160,156]),(False,[160,158]),(False,[160,159]),(False,[159,156]),(False,[159,126]),(False,[159,26]),(False,[159,42]),(False,[159,155]),(False,[159,157]),(False,[159,158]),(False,[158,155]),(False,[158,42]),(False,[158,26]),(False,[158,126]),(False,[158,156]),(False,[158,157]),(False,[157,126]),(False,[157,26]),(False,[157,42]),(False,[157,155]),(False,[157,156]),(False,[156,42]),(False,[156,26]),(False,[156,126]),(False,[156,155]),(False,[155,26]),(False,[155,42]),(False,[155,126]),(False,[126,26]),(False,[126,42]),(False,[154,26]),(False,[154,153]),(False,[42,26]),(False,[26,26])])) (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "lower",Just "bound",Nothing],(False,[(False,[154,158]),(False,[154,156]),(False,[154,126]),(False,[154,26]),(False,[154,42]),(False,[154,155]),(False,[154,157]),(False,[154,159]),(False,[153,158]),(False,[153,156]),(False,[153,126]),(False,[153,26]),(False,[153,42]),(False,[153,155]),(False,[153,157]),(False,[153,159]),(False,[154,160]),(False,[153,160]),(False,[160,157]),(False,[160,155]),(False,[160,42]),(False,[160,26]),(False,[160,126]),(False,[160,156]),(False,[160,158]),(False,[160,159]),(False,[159,156]),(False,[159,126]),(False,[159,26]),(False,[159,42]),(False,[159,155]),(False,[159,157]),(False,[159,158]),(False,[158,155]),(False,[158,42]),(False,[158,26]),(False,[158,126]),(False,[158,156]),(False,[158,157]),(False,[157,126]),(False,[157,26]),(False,[157,42]),(False,[157,155]),(False,[157,156]),(False,[156,42]),(False,[156,26]),(False,[156,126]),(False,[156,155]),(False,[155,26]),(False,[155,42]),(False,[155,126]),(False,[126,26]),(False,[126,42]),(False,[154,153]),(False,[42,26])])) NULL) (NLPredLC [Nothing,Just "has",Just "a",Just "strict",Just "upper",Just "bound",Nothing],(False,[(False,[159,154]),(False,[157,154]),(False,[155,154]),(False,[42,154]),(False,[26,154]),(False,[126,154]),(False,[156,154]),(False,[158,154]),(False,[160,154]),(False,[158,153]),(False,[156,153]),(False,[126,153]),(False,[26,153]),(False,[42,153]),(False,[155,153]),(False,[157,153]),(False,[159,153]),(False,[160,153]),(False,[157,160]),(False,[155,160]),(False,[42,160]),(False,[26,160]),(False,[126,160]),(False,[156,160]),(False,[158,160]),(False,[159,160]),(False,[156,159]),(False,[126,159]),(False,[26,159]),(False,[42,159]),(False,[155,159]),(False,[157,159]),(False,[158,159]),(False,[155,158]),(False,[42,158]),(False,[26,158]),(False,[126,158]),(False,[156,158]),(False,[157,158]),(False,[126,157]),(False,[26,157]),(False,[42,157]),(False,[155,157]),(False,[156,157]),(False,[42,156]),(False,[26,156]),(False,[126,156]),(False,[155,156]),(False,[26,155]),(False,[42,155]),(False,[126,155]),(False,[26,126]),(False,[42,126]),(False,[153,154]),(False,[26,42])])) (Bran Bl NULL (NLPredLC [Nothing,Just "has",Just "an",Just "upper",Just "bound",Nothing],(False,[(False,[42,42]),(False,[154,154]),(False,[126,126]),(False,[155,155]),(False,[156,156]),(False,[157,157]),(False,[158,158]),(False,[159,159]),(False,[160,160]),(False,[153,153]),(False,[152,152]),(False,[161,161]),(False,[159,154]),(False,[157,154]),(False,[155,154]),(False,[42,154]),(False,[126,154]),(False,[156,154]),(False,[158,154]),(False,[160,154]),(False,[158,153]),(False,[156,153]),(False,[126,153]),(False,[26,153]),(False,[42,153]),(False,[155,153]),(False,[157,153]),(False,[159,153]),(False,[160,153]),(False,[157,160]),(False,[155,160]),(False,[42,160]),(False,[26,160]),(False,[126,160]),(False,[156,160]),(False,[158,160]),(False,[159,160]),(False,[156,159]),(False,[126,159]),(False,[26,159]),(False,[42,159]),(False,[155,159]),(False,[157,159]),(False,[158,159]),(False,[155,158]),(False,[42,158]),(False,[26,158]),(False,[126,158]),(False,[156,158]),(False,[157,158]),(False,[126,157]),(False,[26,157]),(False,[42,157]),(False,[155,157]),(False,[156,157]),(False,[42,156]),(False,[26,156]),(False,[126,156]),(False,[155,156]),(False,[26,155]),(False,[42,155]),(False,[126,155]),(False,[26,126]),(False,[42,126]),(False,[26,154]),(False,[153,154]),(False,[26,42]),(False,[26,26])])) NULL))))) (NLPredLC [Nothing,Just "has",Just "finite",Just "size"],(False,[(False,[13])])) (Bran R (Bran Bl (Bran Bl (Bran R (Bran Bl (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "has",Just "size",Nothing],(False,[(False,[13,26])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "binary",Just "relation",Just "over",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "component",Just "of",Nothing],(False,[])) (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "is",Just "a",Just "countable",Just "set"],(False,[(False,[30])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "factor",Just "of",Nothing],(False,[(False,[126,126])])) NULL)) (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set"],(False,[(False,[13])])) (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "set",Just "of",Just "finite",Just "sets"],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "subset",Just "of",Nothing],(False,[(False,[13,162]),(False,[13,31]),(False,[13,30]),(False,[13,33]),(False,[13,20]),(False,[13,13])])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "finite",Just "vector"],(False,[])) NULL))) (NLPredLC [Nothing,Just "is",Just "a",Just "map"],(False,[])) (Bran R (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "natural"],(False,[(False,[153]),(False,[160]),(False,[159]),(False,[158]),(False,[157]),(False,[156]),(False,[155]),(False,[126]),(False,[154]),(False,[42]),(False,[26])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "empty",Just "set"],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "non",Just "-",Just "strict",Just "total",Just "order",Just "over",Nothing],(False,[])) NULL)) (NLPredLC [Nothing,Just "is",Just "a",Just "partial",Just "order",Just "over",Nothing],(False,[])) (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "partition",Just "of",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "prime",Just "factor",Just "of",Nothing],(False,[(False,[126,126])])) (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "real"],(False,[(False,[152]),(False,[153]),(False,[160]),(False,[159]),(False,[158]),(False,[157]),(False,[156]),(False,[155]),(False,[126]),(False,[154]),(False,[42]),(False,[26]),(False,[161])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "reflexive",Just "relation",Just "over",Nothing],(False,[])) (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "is",Just "a",Just "relational",Just "operator"],(False,[(False,[14]),(False,[32]),(False,[4]),(False,[3]),(False,[40]),(False,[27])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "set"],(False,[(False,[162]),(False,[33]),(False,[31]),(False,[30]),(False,[20]),(False,[13])])) (Bran R NULL (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "disjoint",Just "sets"],(False,[])) NULL)))))) (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors"],(False,[])) (Bran R (Bran Bl (Bran R (Bran Bl (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "of",Just "vectors",Just "of",Just "unbounded",Just "size"],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "base",Just "step",Just "for",Just "natural",Just "numbers"],(False,[(False,[31]),(False,[30]),(False,[33]),(False,[20])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "set",Just "that",Just "satisfies",Just "the",Just "inductive",Just "step",Just "for",Just "natural",Just "numbers"],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "singleton"],(False,[])) (Bran R NULL (NLPredLC [Nothing,Just "is",Just "a",Just "split",Just "of",Nothing],(False,[])) NULL))) (NLPredLC [Nothing,Just "is",Just "a",Just "strict",Just "total",Just "order",Just "over",Nothing],(False,[])) (Bran Bl (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function"],(False,[(False,[2]),(False,[97])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "function",Just "from",Nothing,Just "to",Nothing],(False,[(False,[2,163,31]),(False,[97,163,31])])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "map",Just "from",Nothing,Just "to",Nothing],(False,[(False,[2,163,31]),(False,[97,163,31])])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "total",Just "relation",Just "over",Nothing],(False,[])) NULL))) (NLPredLC [Nothing,Just "is",Just "a",Just "transitive",Just "relation",Just "over",Nothing],(False,[])) (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "trichotomous",Just "relation",Just "over",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "vector"],(False,[])) (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Nothing,Just "binary",Just "digits"],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "sets"],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "size",Nothing],(False,[])) NULL)))) (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "of",Just "vectors"],(False,[])) (Bran Bl (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "a",Just "vector",Just "with",Just "unbounded",Just "length"],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "an",Just "antisymmetric",Just "relation",Just "over",Nothing],(False,[])) (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "is",Just "an",Just "element",Just "of",Nothing],(False,[(False,[152,31]),(False,[153,31]),(False,[160,31]),(False,[159,31]),(False,[158,31]),(False,[157,31]),(False,[156,31]),(False,[155,31]),(False,[126,31]),(False,[154,31]),(False,[42,31]),(False,[26,31]),(False,[26,30]),(False,[42,30]),(False,[154,30]),(False,[126,30]),(False,[155,30]),(False,[156,30]),(False,[157,30]),(False,[158,30]),(False,[159,30]),(False,[160,30]),(False,[153,30]),(False,[152,30]),(False,[153,33]),(False,[160,33]),(False,[159,33]),(False,[158,33]),(False,[157,33]),(False,[156,33]),(False,[155,33]),(False,[126,33]),(False,[154,33]),(False,[42,33]),(False,[26,33]),(False,[161,31]),(False,[153,20]),(False,[160,20]),(False,[159,20]),(False,[158,20]),(False,[157,20]),(False,[156,20]),(False,[155,20]),(False,[126,20]),(False,[154,20]),(False,[42,20]),(False,[26,20]),(False,[152,33])])) NULL) (NLPredLC [Nothing,Just "is",Just "an",Just "empty",Just "set"],(False,[(False,[13])])) NULL)) (NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence"],(False,[])) (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "sequence",Just "of",Just "elements",Just "from",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "an",Just "infinite",Just "set"],(False,[(False,[33]),(False,[31]),(False,[30]),(False,[20])])) (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "an",Just "integer"],(False,[(False,[153]),(False,[160]),(False,[159]),(False,[158]),(False,[157]),(False,[156]),(False,[155]),(False,[126]),(False,[154]),(False,[42]),(False,[26]),(False,[152])])) NULL) (NLPredLC [Nothing,Just "is",Just "an",Just "uncountable",Just "set"],(False,[(False,[31])])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "empty"],(False,[(False,[13])])) NULL)))))) (NLPredLC [Nothing,Just "is",Just "even"],(False,[(False,[126])])) (Bran Bl (Bran Bl (Bran Bl (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "finite"],(False,[(False,[13])])) NULL) (NLPredLC [Nothing,Just "is",Just "injective"],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "negative"],(False,[])) NULL)) (NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "empty"],(False,[])) (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "non",Just "-",Just "zero"],(False,[(False,[154]),(False,[153]),(False,[160]),(False,[159]),(False,[158]),(False,[157]),(False,[156]),(False,[155]),(False,[126]),(False,[42])])) NULL) (NLPredLC [Nothing,Just "is",Just "not",Just "a",Just "factor",Just "of",Nothing],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "not",Just "an",Just "element",Just "of",Nothing],(False,[])) NULL))) (NLPredLC [Nothing,Just "is",Just "odd"],(False,[(False,[155]),(False,[42])])) (Bran R (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "of",Just "finite",Just "size"],(False,[(False,[13])])) NULL) (NLPredLC [Nothing,Just "is",Just "of",Just "size",Nothing],(False,[(False,[13,26])])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "one",Just "less",Just "than",Nothing],(False,[])) NULL)) (NLPredLC [Nothing,Just "is",Just "one",Just "more",Just "than",Nothing],(False,[])) (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "positive"],(False,[(False,[154]),(False,[153]),(False,[160]),(False,[159]),(False,[158]),(False,[157]),(False,[156]),(False,[155]),(False,[126]),(False,[42])])) (Bran R NULL (NLPredLC [Nothing,Just "is",Just "prime"],(False,[(False,[155]),(False,[126])])) NULL)) (NLPredLC [Nothing,Just "is",Just "rational"],(False,[(False,[26]),(False,[42]),(False,[154]),(False,[126]),(False,[155]),(False,[156]),(False,[157]),(False,[158]),(False,[159]),(False,[160]),(False,[153]),(False,[152])])) (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "the",Just "empty",Just "set"],(False,[(False,[13])])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "image",Just "of",Nothing,Just "under",Nothing],(False,[])) NULL))))) (NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "closed",Just "and",Just "right",Just "-",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],(False,[])) (Bran R (Bran Bl (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "left",Just "-",Just "open",Just "and",Just "right",Just "-",Just "closed",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "the",Just "logarithm",Just "to",Just "base",Nothing,Just "of",Nothing],(False,[])) (Bran Bl (Bran R NULL (NLPredLC [Nothing,Just "is",Just "the",Just "multiplicative",Just "inverse",Just "of",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "the",Just "open",Just "real",Just "interval",Just "from",Nothing,Just "to",Nothing],(False,[])) NULL)) (NLPredLC [Nothing,Just "is",Just "the",Just "product",Just "of",Just "the",Just "elements",Just "of",Nothing],(False,[])) (Bran Bl (Bran R (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "corresponding",Just "to",Just "the",Just "relational",Just "operator",Nothing],(False,[(False,[165,27]),(False,[164,27])])) NULL) (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "components",Just "in",Nothing,Just "ranging",Just "from",Nothing,Just "to",Nothing],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "set",Just "of",Just "integers",Just "from",Nothing,Just "to",Nothing],(False,[])) NULL)) (NLPredLC [Nothing,Just "is",Just "the",Just "size",Just "of",Nothing],(False,[(False,[26,13])])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Nothing],(False,[])) (Bran R NULL (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "a",Just "finite",Just "subset",Nothing,Just "of",Nothing],(False,[])) NULL)))) (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "sums",Just "of",Nothing],(False,[])) (Bran Bl (Bran Bl (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "elements",Just "of",Nothing],(False,[])) NULL) (NLPredLC [Nothing,Just "is",Just "the",Just "sum",Just "of",Just "the",Just "natural",Just "number",Just "components",Just "in",Nothing,Just "in",Just "the",Just "index",Just "range",Just "from",Nothing,Just "to",Nothing],(False,[])) (Bran Bl NULL (NLPredLC [Nothing,Just "is",Just "zero"],(False,[(False,[26])])) NULL)) (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "above",Just "by",Nothing],(False,[])) (Bran Bl (Bran Bl NULL (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "bounded",Just "below",Just "by",Nothing],(False,[])) NULL) (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "strictly",Just "bounded",Just "above",Just "by",Nothing],(False,[])) (Bran Bl NULL (NLPredLC [Just "the",Just "elements",Just "of",Nothing,Just "are",Just "strictly",Just "bounded",Just "below",Just "by",Nothing],(False,[])) NULL)))))))),[[],[],[],[],[]])